<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VxWorks on VxWorks 7</title>
    <link>https://www.vxworks7.com/categories/vxworks/</link>
    <description>Recent content in VxWorks on VxWorks 7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 17 Dec 2023 19:50:49 +0800</lastBuildDate><atom:link href="https://www.vxworks7.com/categories/vxworks/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VxWorks环境下双冗余以太网卡技术在底层驱动中的实现</title>
      <link>https://www.vxworks7.com/post/vxworks/implementation-of-redundant-network-in-vxworks.html</link>
      <pubDate>Sun, 17 Dec 2023 19:50:49 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/implementation-of-redundant-network-in-vxworks.html</guid>
      <description>本文讲解了VxWorks环境下双冗余以太网卡技术在底层驱动中的实现。
引　言 　随着以太网的稳定性、抗干扰性和带宽问题的逐步改善，以太网正在大规模进入工业控制领域。用于工业过程控制、通信、航天器和导航系统中的网络对可靠性及其响应故障的快速性要求极高。当前，冗余设计作为一种提高设备可靠性的有效方法，已经得到了广泛的应用。对于网络系统中的单个节点，常常需要对网卡进行双冗余备份，即每个节点都采用2块网卡(或2个网口)，中间用集线器或交换机互连，当正常通信的网卡或线路出现故障时，该节点能自动地切换到备份网卡进行通信。图1为冗余网络的一种典型联接形式。
　具有双冗余网卡的节点虽然有2块网卡，2条通道，但对于高层应用系统来说，仍呈现单网卡的特征。具体来讲，2块网卡共有1个物理地址，1个IP地址。根据TCP/IP参考模型，TCP/IP协议族可以分为应用层、传输层、网络层和链路层4层，冗余网卡技术可以在其中各个层面中实现。
VxWorks、MUX与网卡驱动程序 　嵌入式实时操作系统VxWorks的网络协议栈与网络设备驱动的接口有2种：一种是标准的BSD4.4Driver，它将Driver和协议紧密关联在一起，不利于多协议的支持；另一种标准是VxWorks特有的，它将Driver和协议栈隔离开，使二者通过一个称为MUX的薄层相连，使得网络服务免受特定的网络接口驱动程序的影响，达到Driver独立于具体协议的目的，从而实现多协议的支持，三者间的关系如图2所示。
　目前版本的MUX支持2种网络驱动程序接口模式：增强型网络驱动程序接口( END)和网络协议工具包(NPT)驱动程序接口。现以END型网卡驱动为例介绍如何在VxWorks5.4下的NE2000兼容网卡驱动程序中实现双网卡冗余设计。正常情况下，协议驱动程序通过MUX层提供的NIC的句柄来提交请求，这个句柄是调用EndLoaD()获得的；然后MUX层调用网卡驱动程序中的接口函数，实现高层协议驱动程序的请求。
在应用层实现双冗余网卡技术的分析 　在系统中对网卡进行双冗余备份，即1块网卡在正常工作时使用，另1块网卡作为备份。备份用的网卡处于激活状态。在正常通信的网卡出现故障或系统需要时，备份用的网卡能实时地、自动地切换到继续工作。显然，这就要求2块网卡只能使用同1个物理地址和同1个IP地址。从应用程序的角度看，只会看见1块网卡在工作，不关心是哪块网卡在工作及如何切换。
　理论上讲，冗余网卡技术可以在OSI各层中实现，而且越在底层实现，检测和切换的速度越快，效果应该越好。其他利用应用层实现双冗余网卡的主要方法是在程序中发起任务，以查询的方式不断对当前工作网卡的工作状态进行判断，当判断出当前使用的网卡处于非正常状态的时候，将删除当前网卡的路由，在主机列表中删除当前主机名，并解除网卡与协议的绑定；然后进行备份网卡的配置：为备份网卡绑定协议，设置子网掩码和IP地址。用此种方法实际测试，测试中使装有双网卡的主机不断向外发送广播报文，同时用网络分析软件接收。测得2个网口的切换时间平均为120ms，在切换期间有很多广播报文丢失。可见在应用层实现双网卡冗余备份技术，网卡切换速度慢，不利于网络的可靠性和实时性。
在驱动程序中的实现 　在VxWorks系统中，相同类型的网卡使用同一个驱动程序，网卡之间由驱动程序提供的句柄来区别。MUX调用NIC驱动程序的接口函数时，都会把网卡的句柄传入函数中。这就为在驱动程序中实现双网卡冗余备份提供了基础。因此要实现网卡的双冗余备份，最理想的办法是在NIC驱动程序中实现。
数据结构 　网卡驱动程序中最关键的数据结构是有关网卡特性的数据结构。每种网卡都有它自己的特性，包括它的单元号、中断向量、I/O基址、物理地址等。
　系统启动时，在网卡驱动的装载函数中ne2000EndLoad( )中，会为设备初始化1个数据结构，并分配一个指针指向这个结构。这时定义2个全局指针：
NE2000END-DEVICE * pDrvCtrl-0； NE2000END-DEVICE * pDrvCtrl-1； 　在网卡初始化时把这2个指针分别指向2块网卡的数据结构，通过这2个指针的定义，在MUX调用NIC驱动程序的接口函数时，可以根据网卡的好坏或系统的需要来选择pDrvCtrl-0或pDrvCtrl-1，以调整工作网卡。
发送和接收处理 　在上层驱动程序通过MUX调用NIC驱动程序的发送函数时，会传入网卡的句柄，指定要使用的网卡。通常情况下，驱动程序会根据该句柄向相应网卡发出指令，把报文发出去。在双网卡冗余备份驱动程序中，根据需要来指定发送数据要使用的网卡，而不一定使用MUX指定的网卡。如先读2块网卡的Link信号寄存器，判断网络连线的通断，再决定使用哪一块网卡来发送数据。
　在接收报文的时候，通常是在中断中进行处理。因为以太网在物理层上的特点，2块网卡都能收到报文，不同的是只有与高层协议绑定的网卡收到的数据才能向上传递。在双网卡冗余备份驱动程序中，不是由MUX指定的网卡句柄来向上传送数据，而是根据当前网卡的工作状态向上层传送数据，即使数据是从另一块网卡上接收来的或另一块网卡没有和高层协议绑定。
单物理地址的处理 　通常每块网卡有1个全世界范围内唯一的物理地址，它保存在网卡的PROM中。网卡初始化时，要从PROM中读出物理地址，把它存放在适当的寄存器和数据结构中。
　要使2块网卡能相互备份，它们必须有相同的物理地址和IP地址。在双网卡冗余备份驱动程序中，可以用其中1块网卡的物理地址。方法有2种：在驱动程序初始化时只读1块网卡的PROM中的物理地址；或者在网卡驱动程序中的ne2000EnetAddrGet()函数中作修改，完全可以给网卡设定任意的物理地址(只要避免了同一网络中的冲突)。
单IP地址处理 　至于2块网卡采用相同的IP地址，可以这样实现：在安装2块网卡时，只让1块网卡有IP地址，另1块网卡没有IP地址。因为给网卡绑定IP地址是在IP协议所在的网络层实现的，所以在网络层以下切换网卡对上层来说是完全透明的。应用程序自始自终只看见1块网卡在工作。图3是从应用程序的角度看双网卡备份的示意图。
效果分析 　通过对比实验，在应用层实现双网卡冗余备份的平均网卡切换时间是120ms，在驱动层实现双网卡冗余备份的平均网卡切换时间是5ms，相对于在应用层或其他高层中实现，效率较高，大大缩短双网卡的切换时间，从而降低切换时网络通信丢包的机率。
结束语 　分析了VxWorks系统的网络结构模型，提出了在系统底层驱动中实现双网卡冗余备份功能的设想，并进行了设计实现，同时对在驱动程序中实现与在应用层中实现2种方法进行了对比，证明了在驱动程序中不但能够很好地实现双网卡冗余备份功能，而且提高了以太网的实时性和可靠性，在工业以太网蓬勃发展的今天，具有一定的实用意义。</description>
    </item>
    
    <item>
      <title>使用RTOS时需要注意的几点内容</title>
      <link>https://www.vxworks7.com/post/vxworks/several-things-to-note-when-using-RTOS.html</link>
      <pubDate>Sat, 02 Dec 2023 22:45:59 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/several-things-to-note-when-using-RTOS.html</guid>
      <description>&lt;p&gt;对许多嵌入式项目来说，系统设计师都倾向于选择实时操作系统(
&lt;a href=&#34;https://www.vxworks.net&#34; title=&#34;RTOS&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    RTOS
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;)。但RTOS总是必要的吗?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么有些应用非VxWorks不可</title>
      <link>https://www.vxworks7.com/post/vxworks/the-necessity-of-using-vxworks-for-some-application.html</link>
      <pubDate>Sat, 08 Jul 2023 10:47:20 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/the-necessity-of-using-vxworks-for-some-application.html</guid>
      <description>&lt;p&gt;实时操作系统（RTOS）是专用于对时间精确度敏感的操作系统。典型的情况是，这种应用需要从传感器收集数据、做出分析并对关键性设备进行控制，例如飞机、列车、手术刀。这类控制必须精准，不容许出现丝毫差错。这与通用操作系统（General Purpose Operating Systems, GPOS形成对比。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks技术资料免费下载</title>
      <link>https://www.vxworks7.com/post/vxworks/free-vxworks-technical-resouce.html</link>
      <pubDate>Fri, 23 Jun 2023 11:46:30 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/free-vxworks-technical-resouce.html</guid>
      <description>&lt;p&gt;VxWorks技术资料免费下载，资源来源网络，版权归原作者所有！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks任务编程中常见异常分析</title>
      <link>https://www.vxworks7.com/post/vxworks/analysis-of-common-exception-in-vxworks-task-programming.html</link>
      <pubDate>Sun, 18 Jun 2023 07:15:37 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/analysis-of-common-exception-in-vxworks-task-programming.html</guid>
      <description>&lt;p&gt;在任务运行过程中,会出现一些异常的情况,导致任务不能正常运行或者对操作系统造成影响。一般来说,这些异常是由程序的逻辑错误造成的,防止这些异常情况的出现和出现后进行补救就有格外重要的意义。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks实时操作系统的特点</title>
      <link>https://www.vxworks7.com/post/vxworks/feature-of-vxworks.html</link>
      <pubDate>Wed, 03 May 2023 09:57:17 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/feature-of-vxworks.html</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://www.vxworks.net&#34; title=&#34;VxWorks&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;是美国风河系统（WindRiver）公司于1983年设计开发的一种嵌入式实时操作系统（RTOS），是嵌入式开发环境的关键组成部分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks 6.8下基于QT的串口编程</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-6.8-qt-uart-programming.html</link>
      <pubDate>Fri, 07 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-6.8-qt-uart-programming.html</guid>
      <description>&lt;p&gt;文章简要记录了&lt;code&gt;VxWorks 6.8&lt;/code&gt;下基于&lt;code&gt;Qt&lt;/code&gt;实现的&lt;code&gt;串口&lt;/code&gt;编程。&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;串口&lt;/code&gt;，请参阅 
&lt;a href=&#34;https://vxworks.net/app/22-serial-programming-for-vxworks&#34; title=&#34;VxWorks下的串口测试程序设计和源码&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks下的串口测试程序设计和源码
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks操作系统下的串口读写程序</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-uart-read-write-programming.html</link>
      <pubDate>Thu, 06 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-uart-read-write-programming.html</guid>
      <description>&lt;p&gt;关于传统的串口编程，在各大操作系统下的流程基本是一致的，只是针对不同的操作系统，函数接口可能有所差异而已，下面讲述VxWorks操作系统下对于串口读写的编程步骤和代码&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;串口&lt;/code&gt;，请参阅 
&lt;a href=&#34;https://vxworks.net/app/22-serial-programming-for-vxworks&#34; title=&#34;VxWorks下的串口测试程序设计和源码&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks下的串口测试程序设计和源码
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>针对VxWorks的QT 5.15.10发布了</title>
      <link>https://www.vxworks7.com/post/vxworks/qt-5-15-10-for-vxworks-released.html</link>
      <pubDate>Thu, 06 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/qt-5-15-10-for-vxworks-released.html</guid>
      <description>&lt;p&gt;Qt是一个多平台的C++图形用户界面应用程序框架。它提供给应用程序开发者建立艺术级的图形用户界面所需的所用功能。Qt是完全面向对象的编程，所以具有易扩展和组件编程的优势。&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;QT&lt;/code&gt;的文章，请参阅 
&lt;a href=&#34;https://www.vxworks.net/windml/10-qt-installation-and-execution-under-vxworks-6-8&#34; title=&#34;VxWorks 6.8操作系统下QT的安装设置和运行方法&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks 6.8操作系统下QT的安装设置和运行方法
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks实时性能探究</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-real-time-feature-explore.html</link>
      <pubDate>Thu, 02 Jun 2022 11:52:03 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-real-time-feature-explore.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;VxWorks&lt;/code&gt;操作系统是一款硬实时操作系统，一直听闻其实时性能非常优秀，但是一直没有一个直观地概念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔者最近在使用
&lt;a href=&#34;https://www.vxworks.net/&#34; title=&#34;VxWorks&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;, 由大名鼎鼎的风河（WindRiver）开发。本篇文章就是将VxWorks操作系统和市面上几种其他实时操作系统的实时性能进行对比。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>风河公司的资本交易历史</title>
      <link>https://www.vxworks7.com/post/vxworks/windriver-capital-transaction.html</link>
      <pubDate>Thu, 20 Jan 2022 05:40:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/windriver-capital-transaction.html</guid>
      <description>&lt;p&gt;日前，安波福宣布同意以43亿美元现金从私募股权公司TPG Capital收购风河公司（
&lt;a href=&#34;https://www.windriver.club&#34; title=&#34;Wind River&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    Wind River
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;），以帮助其在多个行业的关键软件领域建立独特地位，继续其智能转型，向边缘支持、软件定义的未来迈进。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
