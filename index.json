
[{"content":"","date":"2024-10-20","externalUrl":null,"permalink":"/series/app/","section":"Series","summary":"","title":"App","type":"series"},{"content":"","date":"2024-10-20","externalUrl":null,"permalink":"/app/","section":"Apps","summary":"","title":"Apps","type":"app"},{"content":"","date":"2024-10-20","externalUrl":null,"permalink":"/tags/arinc429/","section":"Tags","summary":"","title":"ARINC429","type":"tags"},{"content":"","date":"2024-10-20","externalUrl":null,"permalink":"/tags/avionics/","section":"Tags","summary":"","title":"Avionics","type":"tags"},{"content":"","date":"2024-10-20","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"2024-10-20","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2024-10-20","externalUrl":null,"permalink":"/tags/vxworks/","section":"Tags","summary":"","title":"VxWorks","type":"tags"},{"content":"航电激励器在民用飞机航电系统半物理仿真平台中起着至关重要的作用。在航电系统开发过程中，航电激励器向航电仿真设备提供的激励数据是进行航电系统仿真验证的基础，所以在航电激励数据的获取和处理中，航电激励器的设计与实现是极其重要的一个环节。该文基于VxWorks 系统设计一款航电激励器，对航电激励器进行总体设计，从激励数据获取模块、激励数据转换模块等方面进行研究，完成软件设计以及硬件平台搭建。通过对设计的航电激励器进行仿真验证，实现飞机模拟飞行数据的获取以及航电系统中ARINC429 总线数据和AFDX 总线数据的相互转换，使得激励数据在传输过程中具有良好的实时性。\n航空电子系统是指飞机上所有电子系统的总和，其仿真验证在航电系统的设计与研发过程中起着重要的作用，对航电系统进行仿真验证，可以有效地降低航电系统集成过程中存在的风险和成本，缩短开发周期。在进行各种仿真验证时，需要航电激励器向仿真组件提供激励信号，所以航电激励器提供的激励信号的准确性和稳定性将对仿真验证的结果产生直接影响。\n目前，航电激励器主要是基于Windows 系统开发的，在数据传输的实时性、可靠性等方面略显不足，并且在向仿真组件提供激励信号时，常出现数据的延时、丢包等问题。VxWorks 系统采用优先级抢占和轮转调度的任务调度机制，具有良好的实时性。基于VxWorks系统开发的航电激励器可以很好地解决Windows 系统下开发的航电激励器所存在的不足。因此本文设计一款基于VxWorks 系统的航电激励器，能够为航电系统提供具有实时性、可靠性的激励信号。\n航电激励器总体设计 # 本文设计的航电激励器由软件和硬件两部分构成。软件部分主要包括激励数据获取模块和数据转换模块。其中，激励数据获取模块通过以太网接收飞机模拟飞行过程中的飞行数据，这些数据包括飞机的位置、姿态、通信导航系统的工作频率等参数。航电激励器数据转换模块主要实现AFDX 总线数据、ARINC429 总线数据的编解码，完成ARINC429 总线数据与AFDX 总线数据相互转化，并向各航电仿真组件传输激励数据。AFDX 数据总线协议见文献[4]，ARINC429 总线协议见文献[5]。硬件部分主要完成VxWorks 系统在MPC8270 上的移植，建立硬件开发平台。航电激励器总体设计如图1所示。\n图1 航电激励器总体设计 航电激励器的软件设计 # 激励数据获取模块 # 从实际应用的角度出发，激励数据获取模块所获取的激励数据主要来源于飞行仿真软件中的飞行数据，通过激励数据获取模块实现激励数据获取模块与飞行仿真软件的内存共享，从而实现飞行数据的实时获取。\n通过以太网发送的飞行数据格式是基于UDP 数据包格式，数据获取模块接收到1 帧数据包后，首先对该数据包的帧头进行判断，其次判断数据帧校验位的正确与否，然后对校验位正确的数据包进行确定报文类型并解析出报文所包含的信息。通过设计ARINC429 总线数据字编码的接口函数，调用ARINC429 数据字编码接口，对将UDP 格式的数据包解码后的飞行数据信息进行编码得到激励数据对应的ARINC429 数据字，确定周期和通道后将该ARINC429 数据字输出到航电仿真组件。激励数据获取流程如图2 所示。\n激励数据转换模块 # AFDX 总线凭借着卓越的传输效率以及高可靠性等特点，广泛地应用于B-787、A380 等先进机型中。目前，航电系统主干网络通常采用AFDX 总线将机载各个子系统连接成一个高效可靠的整体，而飞机很多子系统仍采用比较成熟的ARINC429 总线。因此，本文设计航电激励器的数据转换模块，实现AFDX 总线激励信号与ARINC429 总线激励信号之间的相互转换。上述两种数据格式总线信号的相互转换是互为逆过程，本节将通过设计航电激励器收发ARINC429 总线数据字对应的AFDX 总线数据包，从而实现总线数据间的编码转换。\n图2 激励数据获取流程 对AFDX 总线数据进行分析，将AFDX 总线报文设计成可由多个“消息”（Message）拼接而成的通用格式。AFDX 总线中的每条“消息”都分为三个部分，便于将ARINC429 总线的数据字结构填入AFDX 数据帧结构中。MsgType 指的是对消息类型的编码；LengthInBytes是表示PayLoad 字段的长度；PayLoad 是AFDX 总线的承载内容。PayLoad 长度是可变的，其具体承载的信息格式由MsgType 的值决定。AFDX 总线报文中消息的通用格式如图3 所示。\n图3 AFDX 总线报文中消息的通用格式 硬件平台设计 # VxWorks 系统为开发者提供大量板级支持包BSP（Board Support Packet），便于简化BSP 移植工作。在进行BSP 移植之前，需要根据CPU 型号选择相应BSP 包，同时参考硬件数据调整BSP 相关配置信息。在完成BSP 配置后，建立新的VxWorks Image Project 工程，同时创建映像所需的文件。\n图4 ARINC429 总线数据转换为AFDX 数据包 VxWorks 模块是根据目标板卡的性能需求完成VxWorks 系统内核模块的配置。VxWorks 系统映像经编译生成后，对FTP 环境进行调试。通过运行Workbench 3.3 中的FTP Server，完成FTP 环境中的用户信息配置。完成以上配置后，将VxWorks 映像下载至目标板卡MPC8270 运行。至此完成VxWorks 系统平台的搭建。\n航电激励器的仿真与测试 # 在航电激励器的功能实现之后需要对航电激励器进行验证测试，主要针对航电激励器所能提供的航电激励信号进行测试，即ARINC429 总线激励信号、AFDX 总线激励信号以及激励信号实时性测试。\nARINC429 总线激励信号数据测试 # 航电激励器对接收到的ARINC429 总线激励信号进行数据符合性测试。在飞行数据中获取其中5 种激励数据进行测试，如表1 所示。将航电激励器的一条ARINC429 输出通道连接到ARINC429 总线分析仪，将表1 中激励数据统一设置发送周期为200 ms，输出到ARINC429 总线分析仪。总线分析仪所显示的激励数据如图5 所示。\n表1 激励参量取值 图5 ARINC429 总线分析仪显示的数据 将表1 数据信息与图5 显示结果进行对比，结果显示二者所包含的数据信息一致，航电激励器输出的ARINC429 总线激励信号满足数据符合性要求。\nAFDX 总线激励信号数据测试 # 激励数据获取模块选择飞行仿真软件中模拟飞机的VOR1 频率飞行数据进行验证，激励数据VOR1 频率的相关信息如表2 所示。航电激励器将AFDX 总线激励信号通过AFDX 板卡发送至交换机，通过Wireshark 抓取AFDX 数据包，对应抓取数据包为十六进制数：3800DC84，结果如图6 所示。通过对比验证，航电激励器输出的AFDX 总线激励信号中的数据信息与ARINC429 负载数据一致，航电激励器实现了ARINC429 总线激励信号转化为AFDX 信号的预期功能。\n表2 航电激励器输出AFDX 信号配置信息 ![AFDX](./vxworks-avionics-7.png) 图6 VOR1 频率数据包 激励信号实时性测试 # 本文依靠VxWorks 系统的独特优势保证数据获取的实时性。“实时”并不意味着是“快”，而是指系统响应的时间确定性。时间确定性具体体现为航电激励器能否完全按照规定周期对激励信号进行收发。首先基于VxWorks 系统下的航电激励器对ARINC429 总线激励信号进行输出，配置输出数据信息如表3 所示。\n表3 输出ARINC429 总线信号配置信息 ![输出ARINC429 总线信号配置信息](./vxworks-avionics-9.png) 配置信息完成后，在低速（12.5 Kb/s）模式下，航电激励器输出ARINC429 总线激励信号，通过示波器对ARINC429 的8 号输出通道进行测试。同理，利用Windows 系统下的航电激励器完成表3 配置数据的发送，测试出每对相邻波形起始点间的时间间隔，测试结果如表4 所示。\n经测试验证，基于VxWorks 系统的航电激励器输出的2 组连续信号波形时间间隔与设定发送周期相同，为精确的30.00 ms，没有产生抖动延迟。然而Windows 系统下航电激励器在进行激励信号的周期性发送时，连续的两个信号间的时间间隔容易产生时间抖动，每组波形间的时间延迟在1 ms 以上。综上所述，基于VxWorks系统的航电激励器在时间确定性效果方面更能满足航电系统仿真验证的高实时性需求。\n表4 单通道时间确定性测试结果 ms ![AFDX](./vxworks-avionics-10.png) 结 论 # 本文基于VxWorks 系统，以MPC8270 为目标平台，提出航电激励器的总体设计方案并进行详细设计，最终实现AFDX 总线数据与ARINC429 总线数据的相互转换，为实际的航电仿真系统提供良好的激励数据。通过仿真测试表明所设计的航电激励器达到预期效果。\n（本文来源于《现代电子技术》，作者：孙毅刚，迟文强，作者单位：中国民航大学航空工程学院）\n全文下载地址: 基于VxWorks系统的航电激励器设计与实现\n","date":"2024-10-20","externalUrl":null,"permalink":"/app/design-and-implementation-of-avionics-exciter-based-on-vxworks-system/","section":"Apps","summary":"\u003cp\u003e航电激励器在民用飞机航电系统半物理仿真平台中起着至关重要的作用。在航电系统开发过程中，航电激励器向航电仿真设备提供的激励数据是进行航电系统仿真验证的基础，所以在航电激励数据的获取和处理中，航电激励器的设计与实现是极其重要的一个环节。该文基于\u003ca href=\"https://www.vxworks6.com\" target=\"_blank\"\u003eVxWorks\u003c/a\u003e 系统设计一款航电激励器，对航电激励器进行总体设计，从激励数据获取模块、激励数据转换模块等方面进行研究，完成软件设计以及硬件平台搭建。通过对设计的航电激励器进行仿真验证，实现飞机模拟飞行数据的获取以及航电系统中\u003ca href=\"https://www.vxworks.net\" target=\"_blank\"\u003eARINC429\u003c/a\u003e 总线数据和AFDX 总线数据的相互转换，使得激励数据在传输过程中具有良好的实时性。\u003c/p\u003e\n\u003cp\u003e航空电子系统是指飞机上所有电子系统的总和，其仿真验证在航电系统的设计与研发过程中起着重要的作用，对航电系统进行仿真验证，可以有效地降低航电系统集成过程中存在的风险和成本，缩短开发周期。在进行各种仿真验证时，需要航电激励器向仿真组件提供激励信号，所以航电激励器提供的激励信号的准确性和稳定性将对仿真验证的结果产生直接影响。\u003c/p\u003e\n\u003cp\u003e目前，航电激励器主要是基于Windows 系统开发的，在数据传输的实时性、可靠性等方面略显不足，并且在向仿真组件提供激励信号时，常出现数据的延时、丢包等问题。VxWorks 系统采用优先级抢占和轮转调度的任务调度机制，具有良好的实时性。基于VxWorks系统开发的航电激励器可以很好地解决Windows 系统下开发的航电激励器所存在的不足。因此本文设计一款基于VxWorks 系统的航电激励器，能够为航电系统提供具有实时性、可靠性的激励信号。\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e航电激励器总体设计 \n    \u003cdiv id=\"%E8%88%AA%E7%94%B5%E6%BF%80%E5%8A%B1%E5%99%A8%E6%80%BB%E4%BD%93%E8%AE%BE%E8%AE%A1\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E8%88%AA%E7%94%B5%E6%BF%80%E5%8A%B1%E5%99%A8%E6%80%BB%E4%BD%93%E8%AE%BE%E8%AE%A1\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e本文设计的航电激励器由软件和硬件两部分构成。软件部分主要包括激励数据获取模块和数据转换模块。其中，激励数据获取模块通过以太网接收飞机模拟飞行过程中的飞行数据，这些数据包括飞机的位置、姿态、通信导航系统的工作频率等参数。航电激励器数据转换模块主要实现AFDX 总线数据、ARINC429 总线数据的编解码，完成ARINC429 总线数据与AFDX 总线数据相互转化，并向各航电仿真组件传输激励数据。AFDX 数据总线协议见文献[4]，ARINC429 总线协议见文献[5]。硬件部分主要完成VxWorks 系统在MPC8270 上的移植，建立硬件开发平台。航电激励器总体设计如图1所示。\u003c/p\u003e","title":"基于VxWorks 系统的航电激励器设计与实现","type":"app"},{"content":"","date":"2024-10-20","externalUrl":null,"permalink":"/tags/ffmpeg/","section":"Tags","summary":"","title":"FFmpeg","type":"tags"},{"content":"","date":"2024-10-20","externalUrl":null,"permalink":"/tags/m3u8/","section":"Tags","summary":"","title":"M3u8","type":"tags"},{"content":"","date":"2024-10-20","externalUrl":null,"permalink":"/software/","section":"Softwares","summary":"","title":"Softwares","type":"software"},{"content":"随着互联网技术的飞速发展，越来越多的人选择在线观看视频。无论是直播还是点播，流畅的视频体验离不开背后的技术支持。其中，m3u8文件是一个非常重要的概念。本文将帮助你了解m3u8文件是什么，以及如何使用FFmpeg下载这些视频。\nm3u8文件概述 # m3u8文件是一种文本文件，主要用于支持HLS（HTTP Live Streaming）协议。简单来说，HLS是一种流媒体传输协议，可以让用户在不同的设备上流畅地观看视频。m3u8文件就像一个目录，记录了视频的不同片段在哪里，浏览器或播放器通过读取这个目录来逐步加载视频。\nm3u8文件通常包含以下几个部分：\n文件头：以#EXTM3U开始，表示这是一个m3u8文件 媒体段信息：以#EXTINF开始，后面跟着该媒体段的时长和标题 媒体段URI：指向媒体文件（通常是.ts文件）的路径或URL 文件结尾：以#EXT-X-ENDLIST结束，表示一个完整的m3u8文件 当用户请求观看视频时，播放器首先会读取m3u8文件，然后根据文件中的URL逐个下载视频片段，这样可以实现视频的分段加载，即使网络不稳定也能保证视频的流畅播放。\nm3u8文件的优点：\n支持断点续传：如果网络中断，播放器可以从上次停止的地方继续下载，不会影响观看体验 良好的跨平台兼容性：m3u8文件可以在多种设备和平台上使用，包括手机、电脑和智能电视 适应不同的网络条件：m3u8文件可以根据网络状况动态调整视频质量，确保用户始终获得最佳观看体验 使用FFmpeg下载m3u8视频 # 打开命令行工具（如Windows的CMD/WSL或Mac/Linux的终端），输入以下命令：\nffmpeg -i \u0026#34;m3u8 URL\u0026#34; -c copy output.mp4 -i \u0026quot;m3u8 URL\u0026quot;：指定m3u8文件的URL -c copy：表示直接复制视频和音频流，不进行重新编码，这样可以加快下载速度 output.mp4：指定输出文件的名称和格式 例如，如果你要下载的m3u8文件URL是https://example.com/video.m3u8，命令如下：\nffmpeg -i \u0026#34;https://example.com/video.m3u8\u0026#34; -c copy output.mp4 实战演练 # 首先，你需要找到待下载视频的m3u8链接。这通常可以通过查看网页源代码或使用浏览器的开发者工具（通常可通过按F12键打开）来定位。切换到网络选项卡，在搜索框中输入“.m3u8”过滤出m3u8链接，然后右键点击链接复制URL。\n如果通过上述方式找不到m3u8链接，一般是由于加密了，可以使用浏览器扩展“猫抓”（cat-catch，是github上的开源项目，已经有不少加上广告代码后上架的伪猫抓，请注意自己的数据安全。所有安装地址以github上的为准）。\n打开命令行，输入ffmpeg的下载命令，并粘贴m3u8链接。\n等待ffmpeg下载完成，并保存为mp4文件。\n结语 # m3u8文件在现代流媒体服务中扮演着重要角色，它使得视频可以在不同设备上流畅播放。FFmpeg作为一个强大的开源工具，可以帮助我们轻松下载和处理这些视频。希望本文能够帮助你更好地理解和使用m3u8文件及FFmpeg。\n","date":"2024-10-20","externalUrl":null,"permalink":"/software/download-m3u8-videos-efficiently-with-ffmpeg/","section":"Softwares","summary":"\u003cp\u003e随着互联网技术的飞速发展，越来越多的人选择在线观看视频。无论是直播还是点播，流畅的视频体验离不开背后的技术支持。其中，m3u8文件是一个非常重要的概念。本文将帮助你了解m3u8文件是什么，以及如何使用FFmpeg下载这些视频。\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003em3u8文件概述 \n    \u003cdiv id=\"m3u8%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#m3u8%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003em3u8文件是一种文本文件，主要用于支持HLS（HTTP Live Streaming）协议。简单来说，HLS是一种流媒体传输协议，可以让用户在不同的设备上流畅地观看视频。m3u8文件就像一个目录，记录了视频的不同片段在哪里，浏览器或播放器通过读取这个目录来逐步加载视频。\u003c/p\u003e\n\u003cp\u003em3u8文件通常包含以下几个部分：\u003c/p\u003e","title":"用FFmpeg高效下载m3u8视频","type":"software"},{"content":"","date":"2024-10-20","externalUrl":null,"permalink":"/tags/godlike/","section":"Tags","summary":"","title":"GODLIKE","type":"tags"},{"content":"","date":"2024-10-20","externalUrl":null,"permalink":"/hardware/","section":"Hardwares","summary":"","title":"Hardwares","type":"hardware"},{"content":"","date":"2024-10-20","externalUrl":null,"permalink":"/tags/msi/","section":"Tags","summary":"","title":"MSI","type":"tags"},{"content":"","date":"2024-10-20","externalUrl":null,"permalink":"/tags/z790/","section":"Tags","summary":"","title":"Z790","type":"tags"},{"content":"MSI近日在其官方YouTube频道进行了超过两小时的直播，正式公布了旗舰级主板MEG Z890 GODLIKE的售价。这款顶级主板在美国市场的售价为1,264美元，欧洲市场的售价则高达1,379.99欧元，成为MSI迄今为止最昂贵的主板产品。\n相比前代产品MEG Z790 GODLIKE的1,200美元定价，新款Z890 GODLIKE的价格进一步提升，打破了之前的记录。在北美市场，Z890 GODLIKE的售价已超过1,250美元，若将官方价格转换为欧盟地区的含税价格，甚至达到1,510美元。MSI的GODLIKE系列一直是其主板产品线中的旗舰，专为追求极致性能的发烧友和超频玩家设计。\nMEG Z890 GODLIKE采用了适用于Intel Arrow Lake CPU的LGA 1851插槽，支持Intel Core Ultra系列处理器（第2代）。主板配备了30相电源VRM和110A SPS，拥有10层PCB设计和服务器级材料，搭配密集的散热器，确保在高负载下仍能保持稳定的性能和被动散热效果。\n主要特点：\n内存支持：主板支持双通道DDR5内存，最高可达DDR5 9200+ MT/s（OC），为用户提供了强大的内存超频潜力。\n动态仪表板III：配备3.99英寸LCD屏幕，可实时监控硬件状态、故障排除、BIOS更新，并提供个性化显示选项，提升整体用户体验。\nM.2 XPANDER-Z SLIDER GEN5：单插槽厚度的M.2扩展卡，具有双高速Gen5 M.2插槽，采用EZ Slide设计，方便SSD的升级和更换。\nThunderbolt 5支持：附带的Thunderbolt 5配件卡拥有双Thunderbolt 5端口，提供高达160Gbps的总带宽和高达27W的快速充电能力。\n超级性能配置：采用26+2+1+1双轨电源系统、110A SPS、OC引擎、双8针CPU电源连接器、Core Boost和Memory Boost等高级配置，由2盎司加厚铜和服务器级材料制成的10层PCB，确保主板的稳定性和性能。\nFrozr Guard散热系统：包含波浪形散热片设计、直触交叉热管、MOSFET底板、9W/mK导热垫、双面M.2 Shield Frozr和Frozr AI软件，确保在低温下实现最佳性能。\nEZ DIY设计：提供EZ Link、EZ PCIe Release、EZ Magnetic M.2 Shield Frozr II、EZ M.2 Clip II和EZ Antenna等功能，方便用户自行安装和升级硬件。\n卓越的连接性：配备双Thunderbolt 4端口、10G LAN和5G LAN，以及全速的Intel Killer Wi-Fi 7解决方案，满足专业和多媒体用途的高要求，提供安全、稳定和高速的网络和数据传输。\n极速游戏体验：支持PCIe 5.0插槽，拥有总共8个M.2接口（带有Lightning Gen 5解决方案），以及带有60W USB供电的前置USB 20G接口，满足高速存储和外设连接需求。\nAudio Boost 5 HD音频系统：采用最新的高级ALC4082音频处理器，结合ESS音频DAC和放大器，提供令人惊叹的音频体验。\n尽管MEG Z890 GODLIKE拥有顶级的规格和功能，但其高昂的价格注定了这款主板并非面向大众市场。它主要吸引那些希望利用Intel Arrow Lake CPU（如Core Ultra 9 285K）打破超频世界纪录的专业超频玩家和硬件发烧友。\n除了这款旗舰主板外，MSI的其他Z890芯片组主板价格都未超过1,000美元。其中，次旗舰型号MEG Z890 ACE售价为689美元，约为Z890 GODLIKE价格的一半，提供了更为实惠的高端选择。\n随着Intel Arrow Lake Core Ultra系列处理器的即将推出，众多主板厂商纷纷发布了Z890芯片组主板。MSI作为一线大厂，提供了涵盖不同价位和需求的多款产品。对于追求极致性能和无与伦比配置的用户而言，MEG Z890 GODLIKE无疑是当前市场上的顶尖之选。\n","date":"2024-10-20","externalUrl":null,"permalink":"/hardware/msi-releases-the-most-expensiv-motherboard-ever/","section":"Hardwares","summary":"\u003cp\u003eMSI近日在其官方YouTube频道进行了超过两小时的直播，正式公布了旗舰级主板MEG Z890 GODLIKE的售价。这款顶级主板在美国市场的售价为1,264美元，欧洲市场的售价则高达1,379.99欧元，成为MSI迄今为止最昂贵的主板产品。\u003c/p\u003e\n\u003cp\u003e相比前代产品MEG Z790 GODLIKE的1,200美元定价，新款Z890 GODLIKE的价格进一步提升，打破了之前的记录。在北美市场，Z890 GODLIKE的售价已超过1,250美元，若将官方价格转换为欧盟地区的含税价格，甚至达到1,510美元。MSI的GODLIKE系列一直是其主板产品线中的旗舰，专为追求极致性能的发烧友和超频玩家设计。\u003c/p\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./MSI-MEG-Z890-GODLIKE-2.png\" alt=\"MSI Release MEG Z790 GODLIKE\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003eMEG Z890 GODLIKE采用了适用于Intel Arrow Lake CPU的LGA 1851插槽，支持Intel Core Ultra系列处理器（第2代）。主板配备了30相电源VRM和110A SPS，拥有10层PCB设计和服务器级材料，搭配密集的散热器，确保在高负载下仍能保持稳定的性能和被动散热效果。\u003c/p\u003e","title":"微星发布了一块史上最昂贵主板","type":"hardware"},{"content":"","date":"2024-10-19","externalUrl":null,"permalink":"/tags/gdb/","section":"Tags","summary":"","title":"GDB","type":"tags"},{"content":"在软件开发的复杂世界里，高效的调试工具是解决问题的关键利器。今天，我们将深入探讨强大的调试工具 —— GDB（GNU Debugger）。GDB 为开发者提供了一种深入程序内部运行机制、查找错误和优化性能的有效途径。让我们一同开启 GDB 的调试之旅，解锁代码中的奥秘。\nGDB调试工具 # GDB（GNU Debugger）是强大的调试工具，在软件开发过程中起着至关重要的作用。它可以帮助开发者快速定位和解决程序中的问题。\nGDB做以下4 件主要的事情来帮助您捕获程序中的bug：\n在程序启动之前指定一些可以影响程序行为的变量或条件 在某个指定的地方或条件下暂停程序 在程序停止时检查已经发生了什么 在程序执行过程中修改程序中的变量或条件，这样就可以体验修复一个 bug 的成果，并继续了解其他 bug 启动 GDB 主要有以下两种方法：\n直接启动 gdb：单独输入此命令启动 GDB，启动后需借助file或者exec-file命令指定要调试的程序 gdb test.out：如果有一个名为test.out的可执行文件，可以直接使用这个命令启动 GDB 并加载该程序进行调试 gdb test.out core：当程序发生错误并生成core文件时，可以使用这个命令启动 GDB，以便对错误进行分析 动态链接：gdb test.out pid，这种方式可以将 GDB 链接到一个正在运行中的进程中去，其中pid就是进程号，可以使用ps aux命令查看对应程序的进程号。 要准备调试的程序，首先需要用gcc的-g参数生成可执行文件。这样才能在可执行文件中加入源代码信息以便调试，但这并不是将源文件嵌入到可执行文件中，所以调试时必须保证 GDB 能找到源文件。例如，编译程序时可以使用gcc -g main.c -o test.out这样的命令来生成带有调试信息的可执行文件。\nGDB调试技巧 # 条件断点 条件断点在调试过程中非常实用。设置条件断点可以利用break if命令，例如(gdb)break 666 if testsize==100123123。条件断点的优势在于可以在特定条件满足时才使程序停止，这对于排查异常情况非常有帮助。比如在一个循环中，当某个变量达到特定值时才中断程序，这样可以更精准地定位问题。\n断点命令 断点命令不仅可以让程序在特定位置停止，还可以编写对到达断点响应的脚本，实现更复杂的调试功能。例如，可以在断点处设置一些打印变量值、检查特定条件等操作，以更好地了解程序的运行状态。\n转储二进制内存 GDB 提供了多种方式查看内存。内置支持的x命令可以查看内存地址中的值，其语法为x/\u0026lt;n/f/u\u0026gt; \u0026lt;addr\u0026gt;，其中n是显示内存的长度，f表示显示的格式，u表示从当前地址往后请求的字节数。例如(gdb) x/16xw 0x7FFFFFFFE0F8可以以十六进制、四字节为单位显示从地址0x7FFFFFFFE0F8开始的 16 个单位的内存内容。此外，也可以使用自定义的hexdump命令来查看内存，更加灵活地控制输出格式。\n行内反汇编 使用disassemble/s命令可以查看与函数源代码对应的指令，这有助于了解程序在 CPU 指令级别上的情况。例如，disas main可以显示main函数对应的汇编代码。通过查看汇编代码，可以更深入地理解程序的执行过程，对于分析性能问题、理解底层实现等非常有帮助。\n反向调试 反向调试是 GDB 的一个强大功能。它可以让程序实现上一步上一步的操作，即反向运行。反向调试在一些情况下非常有用，比如调试过程中不小心多执行了一次命令，或者想再次查看刚刚程序执行的过程。反向调试不适用 IO 操作，并且需要 GDB7.0 以上的版本。相关指令有rc或reverse-continue反向运行程序，直到碰到一个能使程序中断的事件；rs或reverse-step反向运行程序到上一次被执行的源代码行等。通过查看寄存器值等方式，可以深入了解程序在反向运行过程中的状态变化。\nGDB调试方法 # 编译及启动调试 在编译代码时，加上 -g 选项是非常重要的，这可以确保在可执行文件中包含调试信息，以便在使用 GDB 进行调试时能够获取更多的程序内部状态信息。例如，使用 gcc -g main.c -o main.out 这样的命令编译代码，生成的 main.out 可执行文件就可以被 GDB 有效地调试。\n启动调试代码有多种方式。可以直接使用 gdb main.out 来启动调试一个可执行文件，然后在 GDB 环境中使用 run 命令来运行程序。如果程序在启动时需要命令行参数，可以在进入 GDB 后使用 run arg1 arg2... 的方式来提供参数并启动调试。\n另外，还可以调试正在运行的程序。\n首先找到程序的进程号，可以使用 ps aux | grep program_name 或 pidof program_name 来获取进程号。 然后使用 gdb attach pid 或者 gdb -p pid 命令将 GDB 附加到正在运行的程序上进行调试。 调试命令 GDB 有许多强大的调试命令。比如 list 命令可以显示源代码：\nlist 会打印当前行后面的代码 list - 显示当前行前面的代码 list lineNumber 打印出行第 lineNumber 行前后的代码 list FunctionName 打印出行函数 FunctionName 前后的代码 break 命令用于设置断点，可以在指定的行号或函数处设置断点:\nbreak \u0026lt;function\u0026gt; 在进入指定函数时停止运行 break \u0026lt;lineNumber\u0026gt; 在指定代码行打断点 break filename:lineNumber 在指定文件的特定行设置断点 break filename:function 在指定文件的函数入口处设置断点 还可以设置条件断点，如 break... if \u0026lt;condition\u0026gt;，当条件成立时程序停止运行。\nnext 命令执行下一条语句，如果该语句为函数调用，不会进入函数内部执行。\nstep 命令执行下一条语句，如果该语句为函数调用，则进入函数执行其中的第一条语句。\ncontinue 命令继续程序的运行，直到遇到下一个断点。\nprint 和 display 命令用于打印变量 / 表达式的值，print 只输出一次，display 跟踪查看某个变量，每次停下来都显示它的值。可以以不同格式打印变量，如 p /f variable，其中 f 可以是 x（十六进制格式）、d（十进制格式）、u（十六进制格式显示无符号整型）等。\nwatch 命令在程序运行过程中监视变量值的变化，如果有变化，马上停止程序运行，如 watch variable 当变量 variable 有变化时，停止程序运行，还有 rwatch 和 awatch 分别在变量被读取和被读或被写时停止程序运行。\n调试段错误 调试段错误的一种快捷方法是生成 core 文件并使用 GDB 加载分析。首先，可以使用 ulimit -c unlimited 命令将 core 文件生成设置为不限制大小。这样，当程序发生段错误时，会生成 core 文件。\n然后，使用 GDB 加载这个 core 文件进行调试。可以使用 gdb program core 的方式，其中 program 是可执行程序名称，core 是生成的 core 文件。在 GDB 中，可以使用 backtrace 命令查看函数调用栈，找到出错的位置。还可以使用 frame 命令查看特定栈帧的信息，使用 print 命令打印变量的值，以确定问题所在。例如，如果在调试过程中发现某个变量的值为空指针，可能是内存分配失败导致的，可以进一步检查相关的内存分配代码。\nGDB使用其他要点 # 调试参数列表 # GDB 拥有丰富的调试参数，以下是一些常见的命令及其用途：\n启动程序：使用 gdb [可执行文件名] 启动 GDB 并加载要被调试的可执行文件。例如 gdb test.out。还可以使用 gdb file [可执行文件名] 的方式启动，如 gdb file test.out。另外，若要调试正在运行的程序，可以使用 gdb attach [进程号] 或 gdb -p [进程号]。\n设置断点： break [行号]：在指定行设置断点，如 break 10。 break [函数名]：在函数入口处设置断点，如 break main。 break [文件名:行号]：在指定文件的特定行设置断点，如 break test.c:20。 break\u0026hellip; if [条件]：设置条件断点，当条件成立时程序停止运行，如 break 666 if testsize==100123123。 info breakpoints：显示当前程序的断点设置情况。 delete breakpoints [断点号]：删除指定断点，不指定断点号则删除所有断点。 disable [断点号]：暂停指定断点。 enable [断点号]：开启指定断点。 clear [行号]：清除指定行的断点。 单步执行： next（简写为 n）：逐过程调试，执行下一行，当遇到函数调用时，会一次性执行完该函数，不进入函数体内部。 step（简写为 s）：单步调试，执行下一行，当遇到函数调用时，会进入函数体内部。 continue（简写为 c）：继续执行程序，直到下一个断点处或程序结束。 until：当厌倦在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。until+行号：运行至某行，可用于跳出循环。 finish：运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息。 call [函数(参数)]：调用程序中可见的函数，并传递参数，如 call gdb_test(55)。 查看信息： info registers：显示所有寄存器的内容，可查看特定寄存器，如 info registers rbp 显示 rbp 寄存器的值，info registers rsp 显示 rsp 寄存器的值。 info stack：显示堆栈信息。 info args：显示当前函数的参数列表。 info locals：显示当前函数的局部变量列表。 info function：查询函数。 info breakpoints：显示当前程序的断点设置情况。 info watchpoints：列出当前所设置的所有观察点。 info line [行号/函数名/文件名:行号/文件名:函数名]：查看源代码在内存中的地址。 查看内存单元值 # 在 GDB 中，可以使用 examine 命令（简写是 x）来查看内存地址中的值。其格式为 x/\u0026lt;n/f/u\u0026gt; \u0026lt;addr\u0026gt;，其中：n是一个正整数，表示显示内存的长度，从当前地址向后显示几个地址的内容。例如 x/16xb 0x7FFFFFFFE0F8 表示以单字节为单位显示从地址 0x7FFFFFFFE0F8 开始的 16 个字节的内容。\nf表示显示的格式，可取如下值：\nx：按十六进制格式显示变量。 d：按十进制格式显示变量。 u：按十进制格式显示无符号整型。 o：按八进制格式显示变量。 t：按二进制格式显示变量。 a：按十六进制格式显示变量。 i：指令地址格式。 c：按字符格式显示变量。 f：按浮点数格式显示变量。 u表示一个地址单元的长度，可用以下字符代替：\nb表示单字节。 h表示双字节。 w表示四字节。 g表示八字节。 查看源程序 # 在 GDB 中，可以使用 list（简写为 l）命令查看源程序，有以下几种方式：\nlist：显示当前行后面的源程序，默认每次显示 10 行，按回车键继续看余下的。 list [行号]：将显示当前文件以 “行号” 为中心的前后 10 行代码，如 list 12。 list [函数名]：将显示 “函数名” 所在函数的源代码。 栈帧相关 # GDB 中有一些与栈帧相关的命令：\ninfo frame：打印当前栈帧的详细信息，包括当前函数、参数和局部变量等。例如：(gdb) info frame会显示诸如 Stack level 0, frame at [地址]: pc = [程序计数器值] in [函数名] ([文件名]:[行号]); saved pc [保存的程序计数器值]等信息。 up和down：在栈帧之间上下移动。up命令将切换到上一个栈帧，而down命令将切换到下一个栈帧。 info locals：显示当前函数的局部变量列表，帮助开发者了解当前栈帧中的局部变量情况。 GDB多线程调试 # GDB 多线程调试基础 # 基本命令介绍 在 GDB 多线程调试中，有许多常用命令。例如设置断点可以使用 (gdb) break function_name，通过这个命令可以在特定的函数处设置断点，当程序执行到该函数时会暂停。删除断点则可以使用 (gdb) delete breakpoints。查看线程信息可以使用 (gdb) info threads，这个命令会列出所有可调试的线程信息，包括 GDB 分配的线程 ID、系统级的线程标识符以及线程的栈信息等。切换线程可以使用 (gdb) thread thread_id，通过指定线程 ID 可以快速切换到对应的线程进行调试。此外，设置监视点可以使用 (gdb) watch variable_name，用于观察某个变量的值是否有变化，一旦变化程序会立即暂停。删除监视点则是 (gdb) delete watchpoints。\n编译多线程程序 在进行多线程调试之前，我们需要先编译多线程程序。通常，我们可以使用 gcc 编译器来编译多线程程序。例如，对于以下多线程程序代码：\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #define NUM_THREADS 5 void * thread_func(void * thread_id) { long tid = (long)thread_id; printf(\u0026#34;Hello World! It\u0026#39;s me, thread #%ld!\u0026#34;, tid); pthread_exit(NULL); } int main() { pthread_t threads[NUM_THREADS]; int rc; long t; for (t = 0; t \u0026lt; NUM_THREADS; t++) { printf(\u0026#34;In main: creating thread %ld\u0026#34;, t); rc = pthread_create(\u0026amp;threads[t], NULL, thread_func, (void *)t); if (rc) { printf(\u0026#34;ERROR; return code from pthread_create() is %d\u0026#34;, rc); return -1; } } pthread_exit(NULL); } 我们可以将上述代码保存至一个名为 multithread.c 的文件中，并使用以下命令进行编译：$ gcc -g -pthread -o multithread multithread.c。其中，-g 选项用于在可执行文件中加入调试信息，这样在使用 GDB 进行调试时可以获取更多的程序信息；-pthread 选项则用于引入多线程库，确保程序能够正确地使用多线程功能。\n多线程调试案例分析 # 简单多线程程序调试 假设我们有一个如下的简单多线程程序：\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; void *printNumbers(void *arg) { int i; for (i = 0; i \u0026lt; 10; i++) { printf(\u0026#34;Thread: %d\\n\u0026#34;, i); } return NULL; } int main() { pthread_t thread1, thread2; pthread_create(\u0026amp;thread1, NULL, printNumbers, NULL); pthread_create(\u0026amp;thread2, NULL, printNumbers, NULL); pthread_join(thread1, NULL); pthread_join(thread2, NULL); return 0; } 我们可以使用以下步骤进行 GDB 调试：\n首先，编译程序：$ gcc -g -pthread -o simple_thread simple_thread.c 然后启动 GDB：$ gdb simple_thread 在 main 函数处设置断点：(gdb) break main 运行程序：(gdb) run，程序会停在 main 函数的断点处。 接着，我们可以使用 (gdb) info threads 查看当前的线程信息。可以看到有两个线程正在运行，一个是主线程，一个是其中一个子线程。 使用 (gdb) thread thread_id 切换到子线程，然后进行单步执行操作，如 (gdb) next，可以观察到子线程的执行过程。 复杂多线程程序调试 对于更复杂的多线程程序，比如多个线程之间存在交互和同步问题的程序，调试会更加具有挑战性。\n例如，有一个多线程程序，多个线程同时对一个共享资源进行读写操作，可能会出现竞争条件和数据不一致的问题。\n在这种情况下，我们可以使用 GDB 的以下技巧来处理：\n使用 (gdb) break function_name 在关键的同步函数处设置断点，如互斥锁的加锁和解锁函数。 通过 (gdb) info threads 随时查看线程状态，确定哪个线程正在持有共享资源，哪个线程在等待资源。 使用 (gdb) thread apply all bt 查看所有线程的调用堆栈，以了解每个线程的执行路径和当前状态。 设置条件断点，例如 (gdb) break function_name if condition，当特定条件满足时才触发断点，以便在复杂的交互场景中更精确地定位问题。 例如，假设我们有一个多线程的银行账户管理程序，多个线程同时进行存款和取款操作，我们可以在存款和取款函数处设置断点，并根据账户余额等条件设置条件断点，以便在出现异常情况时能够快速定位问题所在。\n多线程调试技巧 # 线程锁定与并发控制 在 GDB 中，可以使用 set scheduler-locking 命令来控制线程的执行顺序和并发程度。这个命令有三个值，分别是 on、step 和 off。\nset scheduler-locking on：可以用来锁定当前线程，只观察这个线程的运行情况，锁定这个线程时，其他线程处于暂停状态。在当前线程执行 next、step、until、finish、return 命令时，其他线程是不会运行的。需要注意的是，在使用这个选项时要确认当前线程是否是我们期望锁定的线程，如果不是，则可以使用 thread + 线程编号 切换到我们需要的线程，再调用 set scheduler-locking on 锁定。 set scheduler-locking step：也用来锁定当前线程，当且仅当使用 next 或 step 命令做单步调试时会锁定当前线程，如果使用 until、finish、return 等线程内的调试命令（它们不是单步控制命令），则其他线程还是有机会运行的。与 on 选项的值相比，step 选项的值为单步调试提供了更加精细化的控制，因为在某些场景下，我们希望单步调试时其他线程不要对所属的当前线程的变量值造成影响。 set scheduler-locking off：用于释放锁定当前线程。 我们还可以使用 show scheduler-locking 命令来显示线程的 scheduler-locking 状态。\n命令组合与高效调试 一些常用的 GDB 命令组合可以提高多线程调试的效率。例如：\ninfo threads + thread thread_id + bt：先使用 info threads 查看当前进程的所有线程信息，然后使用 thread thread_id 切换到特定线程，再使用 bt 查看该线程的函数调用堆栈，以便分析该线程的执行逻辑。 break function_name + condition + run + next/step：先使用 break function_name if condition 在特定函数处设置条件断点，然后使用 run 运行程序，当条件满足时程序会停在断点处，接着使用 next 或 step 进行单步调试。 thread apply all command：可以让所有被调试线程执行特定的 GDB 命令，例如 thread apply all bt 可以查看所有线程的调用堆栈。 常见问题与解决方案 在多线程调试过程中，可能会遇到以下常见问题：\n线程死锁：如果程序出现死锁，可以使用 GDB 的以下步骤进行分析。\n首先，使用 gdb 启动程序，然后在程序死锁处按 ctrl+c 暂停程序。接着，使用 info threads 查看当前节点上线程状态，使用 thread thread_id 切换线程，使用 bt 查看线程堆栈，并查处死锁位置。多切换几个线程，全面分析死锁的原因。一般来说，首先检查使用频率最高的锁在所有函数出口上是否已解锁。如果是第一轮出现死锁，则可检查锁配对和可能的程序出口上是否进行了开锁。如果多轮运行后出现，且基本确认函数出口均解锁，则需要判断是否是内存越界，可以使用工具 valgrind 进行内存越界诊断。\n无法确定当前调试的线程：可以使用 info threads 命令查看当前可调试的所有线程，每个线程会有一个 GDB 为其分配的 ID，前面有 * 的是当前调试的线程。也可以使用 thread thread_id 切换到特定线程进行确认。\n多线程程序调试效率低下：可以使用前面提到的命令组合和线程锁定功能，有针对性地调试特定线程或在特定条件下进行调试，提高调试效率。同时，可以将程序中的线程数量减少至 1 进行调试，观察是否正确，然后逐步增加线程数量，调试线程的同步是否正确。\n","date":"2024-10-19","externalUrl":null,"permalink":"/software/gdb-debugging-multi-threads-case-analysis/","section":"Softwares","summary":"\u003cp\u003e在软件开发的复杂世界里，高效的调试工具是解决问题的关键利器。今天，我们将深入探讨强大的调试工具 —— GDB（GNU Debugger）。GDB 为开发者提供了一种深入程序内部运行机制、查找错误和优化性能的有效途径。让我们一同开启 GDB 的调试之旅，解锁代码中的奥秘。\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eGDB调试工具 \n    \u003cdiv id=\"gdb%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#gdb%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eGDB（GNU Debugger）是强大的调试工具，在软件开发过程中起着至关重要的作用。它可以帮助开发者快速定位和解决程序中的问题。\u003c/p\u003e","title":"GDB调试多线程案例分析","type":"software"},{"content":"","date":"2024-10-19","externalUrl":null,"permalink":"/tags/multi-threads/","section":"Tags","summary":"","title":"Multi Threads","type":"tags"},{"content":"","date":"2024-10-19","externalUrl":null,"permalink":"/tags/https/","section":"Tags","summary":"","title":"HTTPS","type":"tags"},{"content":"","date":"2024-10-19","externalUrl":null,"permalink":"/tags/network/","section":"Tags","summary":"","title":"Network","type":"tags"},{"content":"","date":"2024-10-19","externalUrl":null,"permalink":"/series/software/","section":"Series","summary":"","title":"Software","type":"series"},{"content":"","date":"2024-10-19","externalUrl":null,"permalink":"/tags/tcp/","section":"Tags","summary":"","title":"TCP","type":"tags"},{"content":" HTTP # 超文本传输协议 超文本传输协议（Hypertext Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以ASCII形式给出；而消息内容则具有一个类似MIME的格式。这个简单模型是早期Web成功的有功之臣，因为它使开发和部署非常地直截了当。\nHTTP/3 # HTTP/3 是 HTTP 的下一个主要修订版本。它基于 QUIC 运行，QUIC 是一种专为移动互联网使用量大而设计的新传输协议。它依赖于 UDP 而不是 TCP，从而可以实现更快的网页响应速度。VR 应用需要更多带宽来渲染虚拟场景的复杂细节，并且可能会从迁移到由 QUIC 支持的 HTTP/3 中受益。\nHTTPS # 超文本传输协议安全版 HTTPS（Hypertext Transfer Protocol Secure），是以安全为目标的 HTTP 通道，在HTTP的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS 在HTTP 的基础下加入SSL，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。HTTPS 存在不同于 HTTP 的默认端口及一个加密/身份验证层（在 HTTP与 TCP 之间）。这个系统提供了身份验证与加密通讯方法。它被广泛用于万维网上安全敏感的通讯，例如交易支付等方面。\nWebSocket # WebSocket 是独立的、创建在 TCP 上的协议。Websocket 通过HTTP/1.1 协议的101状态码进行握手。为了创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（handshaking）。\nTCP # 传输控制协议 传输控制协议（TCP，Transmission Control Protocol）是为了在不可靠的互联网络上提供可靠的端到端字节流而专门设计的一个传输协议\nUDP # 用户数据报协议 UDP是一种无连接的、不可靠的、基于数据报的传输层通信协议。它追求的是传输速度而非可靠性，适用于对实时性要求较高但对数据完整性要求不高的场景。\nSMTP # 简单邮件传输协议 SMTP是一种用于发送电子邮件的协议，它规定了电子邮件在发送过程中的格式和传输方式。\nFTP # 文件传输协议 文件传输协议（File Transfer Protocol，FTP）是用于在网络上进行文件传输的一套标准协议，它工作在 OSI 模型的第七层，TCP 模型的第四层， 即应用层， 使用 TCP 传输而不是 UDP， 客户在和服务器建立连接前要经过一个“三次握手”的过程， 保证客户与服务器之间的连接是可靠的， 而且是面向连接， 为数据传输提供可靠保证。\n","date":"2024-10-19","externalUrl":null,"permalink":"/software/8-popular-network-protocols/","section":"Softwares","summary":"\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./8-Popular-Network-Protocols.gif\" alt=\"8 Popular Network Protocols\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eHTTP \n    \u003cdiv id=\"http\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#http\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cblockquote\u003e超文本传输协议\u003c/blockquote\u003e\n\u003cp\u003e超文本传输协议（Hypertext Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以ASCII形式给出；而消息内容则具有一个类似MIME的格式。这个简单模型是早期Web成功的有功之臣，因为它使开发和部署非常地直截了当。\u003c/p\u003e","title":"一张图解释 8 种流行网络协议","type":"software"},{"content":"","date":"2024-10-19","externalUrl":null,"permalink":"/tags/space/","section":"Tags","summary":"","title":"Space","type":"tags"},{"content":"","date":"2024-10-19","externalUrl":null,"permalink":"/tags/windows-11/","section":"Tags","summary":"","title":"Windows 11","type":"tags"},{"content":"是不是经常看到“C盘空间不足”的烦人提示？C盘满了，不仅会影响系统的运行速度，还可能导致更新失败或软件崩溃。其实，只需要几步简单设置，就能大大减少C盘的压力，让你的电脑快起来！下面就分享如何让系统不再占用C盘空间，轻松释放宝贵C盘空间！\n转移用户文件夹到其他分区 # C盘不仅安装系统，许多用户文件（如桌面、文档、下载等）也都默认保存在这里，久而久之占用大量空间。解决办法很简单，直接把这些文件夹挪到D盘或其他分区就好。\n操作步骤： # 在桌面上找到“文档”或“下载”文件夹，右键选择“属性”。\n切换到“位置”选项卡，点击“移动”按钮。\n选择一个其他分区的文件夹（如D盘的某个文件夹），点击“确定”。\n系统会提示是否将已有文件移动到新位置，点击“是”即可。\n这样，今后保存到桌面、文档、下载等地方的文件都会自动放在D盘，再也不用担心C盘空间不够用了！\n改变软件默认安装位置 # 很多软件在安装时，都会默认装到C盘的 Program Files 文件夹，特别是游戏或设计类软件，一装就是好几GB！其实我们可以改变软件的安装路径，让软件装到D盘。\n操作步骤： # 按下 Win + I 打开“设置”。\n点击“系统” -\u0026gt; “存储”，选择“更改新内容的保存位置”。\n在“新应用将保存到”选项中，将C盘改为其他分区，如D盘。\n此后，安装的软件会默认放在D盘，而不是C盘。不过，注意某些软件安装时仍然会让你手动选择安装位置，请记得检查一下！\n将虚拟内存和临时文件转移到其他分区 # Windows为了提高性能，会使用虚拟内存文件以及存储大量的临时文件，它们默认都放在C盘，逐渐占据了不少空间。我们可以轻松将这些文件转移到其他分区。\n转移虚拟内存 # 操作步骤： # 右键点击“此电脑”，选择“属性”。\n在左侧选择“高级系统设置”。\n在“性能”部分点击“设置”，切换到“高级”选项卡，点击“更改”。\n取消“自动管理所有驱动器的分页文件大小”，选择C盘，设置为“无分页文件”，再选择其他分区，设置为“系统管理的大小”。\n点击“确定”并重启电脑。\n转移临时文件 # 操作步骤： # 按下 Win + R 打开“运行”，输入 sysdm.cpl 并回车\n在“高级”选项卡中，点击“环境变量”\n在“用户变量”部分找到 TEMP 和 TMP，分别点击“编辑”\n将它们的路径修改到D盘或其他分区的文件夹，比如 D:\\Temp\n这样，虚拟内存和临时文件都会存储在其他分区，C盘的空间将大大节省。\n关闭休眠功能释放C盘空间 # Windows的休眠功能会在C盘创建一个巨大的文件 hiberfil.sys，有时候这个文件甚至能占用几GB空间。如果你平时很少用休眠功能，可以直接关闭它，释放这块空间。\n操作步骤： # 按下 Win + X，选择“命令提示符（管理员）”。\n在窗口中输入以下命令并按回车：\npowercfg -h off 完成后，休眠功能将被关闭，并且 hiberfil.sys 文件会被删除，立马释放出几个GB的C盘空间。 定期清理系统垃圾文件 # 即使我们做了上述优化，Windows系统在使用过程中仍会产生各种缓存和垃圾文件，定期清理这些文件能让C盘更干净。\n操作步骤： # 打开“此电脑”，右键C盘，选择“属性”。\n点击“磁盘清理”，系统会扫描可清理的文件。\n勾选“临时文件”、“回收站”等选项，点击“确定”进行清理。\n你还可以点击“清理系统文件”，这样能清理到更多的系统缓存和无用文件。\n通过这几步简单设置，C盘不再是系统的唯一战场。转移用户文件、改变软件安装路径、管理虚拟内存和临时文件，再加上定期清理，C盘空间告急的烦恼就能轻松解决。\n","date":"2024-10-19","externalUrl":null,"permalink":"/software/free-up-space-on-c-drive-in-windows/","section":"Softwares","summary":"\u003cp\u003e是不是经常看到“C盘空间不足”的烦人提示？C盘满了，不仅会影响系统的运行速度，还可能导致更新失败或软件崩溃。其实，只需要几步简单设置，就能大大减少C盘的压力，让你的电脑快起来！下面就分享如何让系统不再占用C盘空间，轻松释放宝贵C盘空间！\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e转移用户文件夹到其他分区 \n    \u003cdiv id=\"%E8%BD%AC%E7%A7%BB%E7%94%A8%E6%88%B7%E6%96%87%E4%BB%B6%E5%A4%B9%E5%88%B0%E5%85%B6%E4%BB%96%E5%88%86%E5%8C%BA\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E8%BD%AC%E7%A7%BB%E7%94%A8%E6%88%B7%E6%96%87%E4%BB%B6%E5%A4%B9%E5%88%B0%E5%85%B6%E4%BB%96%E5%88%86%E5%8C%BA\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eC盘不仅安装系统，许多用户文件（如桌面、文档、下载等）也都默认保存在这里，久而久之占用大量空间。解决办法很简单，直接把这些文件夹挪到D盘或其他分区就好。\u003c/p\u003e\n\n\n\u003ch3 class=\"relative group\"\u003e操作步骤： \n    \u003cdiv id=\"%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e在桌面上找到“文档”或“下载”文件夹，右键选择“属性”。\u003c/p\u003e","title":"如何释放Windows 的C 盘空间","type":"software"},{"content":"本文介绍20个能够大大提升Windows 11操作效率的快捷键，掌握这些快捷键能让你的工作和学习事半功倍！\n启动文件资源管理器 # Windows键 + E 如果你像我一样，经常使用文件资源管理器。使用键盘快捷键，只需按Windows键 + E，就可以在你需要时随时启动一个新的文件资源管理器窗口。\n直接进入任务管理器 # Ctrl + Shift + Esc 你可能知道基本的Ctrl + Alt + Delete快捷键，但如果你用它来打开任务管理器，实际上有一个更好的方法：使用Ctrl + Shift + Esc快捷键。\n打开设置 # Windows键 + I 想要更改操作系统中的设置吗？不必在开始菜单中搜索，实际上有一个你可以使用的键盘快捷键：Windows键 + I，然后，你可以在设置应用中直接搜索你需要的内容。\n查阅剪贴板历史 # Windows键 + V 你知道每次你将图像或文本复制到剪贴板时，Windows都会保存它们的运行历史吗？通常的Ctrl + V快捷键只粘贴你最后复制的项目——但如果你想要粘贴你很久以前复制的东西， 你所要做的只是用Windows键 + V快捷键调出剪贴板历史。如果你以前从未打开过，系统会提示你授予权限以激活该功能。\n剪贴板历史的优点在于，你甚至可以将某些复制的项目固定到面板上，使它们在将来更容易找到。\n在任何地方插入表情符号 # Windows键 + 分号 表情符号已经成为现代通信的一部分——微软知道这一点， 你所要做的只是按Windows键 + 分号快捷键。\n语音输入 # Windows键 + H Windows允许你在几乎任何应用程序中使用语音输入。要调出语音输入界面，只需按Windows键 + H，你会看到一个浮动的窗口（在Windows 11上）或一个栏（在Windows 10上）。\n你可以在窗口/栏的设置菜单中激活自动标点等功能。\n超级用户菜单 # Windows键 + X 当微软在Windows 8中取消了开始菜单时，他们至少还给了超级用户一个面子：隐藏的“超级用户菜单”，可以快速访问各种系统设置。\n在Windows 11，也有超级用户菜单。要打开它，可以使用按Windows键 + X\n锁定你的电脑 # Windows键 + L 为了保护你的电脑免受未经授权的访问——特别是在办公室环境中——你应该在离开时锁定电脑。只需按Windows键 + L快捷键。\n控制声音设置 # Ctrl + Windows键 + V 如果你有多个声音输出设备（例如，扬声器、耳机、无线耳塞）或多个声音输入设备（例如，笔记本麦克风、耳机、外部麦克风），你可能经常在它们之间切换。\n实际上，只需按Ctrl + Windows键 + V 快捷键即可调出声音设置菜单。\n这也可以用来调整系统音量和每个应用的音量（使用滑块），并且是快速进入设置应用的声音部分（通过点击更多音量设置）的一种方式。\n拖拽窗口 # Windows键 +箭头 Snap功能是Windows 11中进行多任务处理的窗口管理工具。你可以轻松地将应用程序窗口“拖拽”到屏幕边缘。\n首先，使用Windows键 + 左箭头和Windows键 + 右箭头将当前聚焦的窗口拖拽到屏幕的左半边或右半边。类似地，使用Windows键 + Alt + 上箭头和Windows键 + Alt + 下箭头将窗口拖拽到屏幕的上方或下方的一半。\n你还可以使用快捷键将窗口移动到屏幕的四个象限。例如，在使用上述快捷键将窗口拖拽到左侧一半后，保持按住Windows键并点击上箭头，将其拖拽到左上象限。\n激活Snap布局 # Windows键 + Z 就像Snap本身已经很有用一样，Windows 11还有一个额外的Snap布局功能，可以更容易地将窗口拖拽到各种配置中。\n要激活Snap布局，使用Windows键 + Z 快捷键。你会看到一个带有编号的弹出窗口——只需按相应的数字键选择该窗口布局。\n你还可以通过将鼠标指针悬停在窗口的最大化按钮上来查看Snap布局。或者，将任何窗口拖拽到屏幕中心顶部的边缘以查看Snap选项。\n在PC游戏中在窗口模式和全屏模式之间切换 # Alt + Enter 许多PC游戏提供窗口模式和全屏模式。如果你想要在这两种模式之间切换，频繁地导航到游戏设置菜单可能会相当麻烦。\n以下是在许多PC游戏中快速在窗口模式和全屏模式之间切换的方法：只需按Alt + Enter，这并不适用于所有游戏，但在许多游戏中都有效。\n在虚拟桌面之间切换 # Windows 11有一个名为任务视图的功能，让你可以创建可以切换的“虚拟桌面”。虚拟桌面就像是“桌面”的单独实例，每个虚拟桌面可以容纳自己的一组运行中的应用窗口。\n任务视图体验有几个键盘快捷键，如Windows键 + Tab，可以轻松创建新的虚拟桌面，删除现有的虚拟桌面，并在它们之间切换。\n但是一旦你创建了一些虚拟桌面，更简单的方法是使用Windows键 + Ctrl + 左箭头和Windows键 + Ctrl + 右箭头 快捷键在它们之间切换。\n在显示器之间移动窗口 # Windows键 + Shift + 箭头 你可以通过按Windows键 + Shift + 左箭头（将当前聚焦的窗口移动到左侧显示器）或Windows键 + Shift + 右箭头（将当前聚焦的窗口移动到右侧显示器）来在显示器之间移动窗口。\n打开经典的文件资源管理器上下文菜单 # 在Windows 11上，文件资源管理器从以前的版本改变了很多，特别是有一个简化的上下文菜单。但有些选项只有在那个经典的、老式的上下文菜单中才能找到。\n你可以实际上使用键盘快捷键立即打开旧的上下文菜单：在文件资源管理器中右键点击时按住Shift键以查看经典上下文菜单。\n快速编辑文本 # 按住Ctrl键可以使大多数键对整个单词而不是单个字符起作用。\n例如，Backspace键删除前一个字符，但Ctrl + Backspace删除前一个单词。另一个例子，左箭头和右箭头键将光标移动一个字符，但Ctrl + 左箭头和Ctrl + 右箭头将光标从单词移动到单词。\n它与Shift键也一起工作。按住Shift键时，你可以随着光标的移动高亮文本——所以，如果你想要快速高亮多个连续的单词，只需按住Ctrl + Shift，然后点击左箭头和右箭头键。（尝试与Home和End键一起按Shift键，就高亮整行文本！）\n重新打开已关闭的浏览器标签页 # Ctrl + Shift + T 所有浏览器——包括Chrome、Firefox、Opera和Edge——都允许你快速重新打开已关闭的标签页。也很容易记住：如果Ctrl + T键盘快捷键创建一个新标签页，那么Ctrl + Shift + T快捷键重新打开最后一个关闭的标签页。\n反向Alt + Tab # Alt + Tab是Windows中最经典的键盘快捷键之一。但是，如果你有很多打开的窗口要循环浏览，有时反向循环可能更有意义。在这种情况下，只需按Shift + Alt + Tab以反向浏览打开窗口的列表。\n当Alt + Tab对话框打开时，你还可以使用箭头键立即跳转到所选缩略图窗口。\n快速重命名文件 # 在文件资源管理器中选择文件后，只需按F2，输入名称，然后按Enter。\n我喜欢使用箭头键在文件之间导航，然后使用F2键快速重命名它们。或者更好的方法是：按下F2并输入文件名后，按Tab键（而不是Enter键），立即开始重命名文件夹中的下一个文件。\n将屏幕截图保存为文件 # 内置的Windows屏幕截图工具已经变得更好了，但有时你可能想要跳过工具，立即保存为图像文件。\n要直接将屏幕截图保存到本地，按Windows键 + Print Screen，屏幕会闪烁，Windows会将屏幕截图保存下来。之后，你可以在图片文件夹中的Screenshots文件夹找到屏幕截图。\n","date":"2024-10-19","externalUrl":null,"permalink":"/software/20-very-useful-windows-11-shortcuts/","section":"Softwares","summary":"\u003cp\u003e本文介绍20个能够大大提升Windows 11操作效率的快捷键，掌握这些快捷键能让你的工作和学习事半功倍！\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e启动文件资源管理器 \n    \u003cdiv id=\"%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eWindows键 + E\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果你像我一样，经常使用文件资源管理器。使用键盘快捷键，只需按\u003ccode\u003eWindows键 + E\u003c/code\u003e，就可以在你需要时随时启动一个新的文件资源管理器窗口。\u003c/p\u003e","title":"20 个非常有用的Windows 11快捷键","type":"software"},{"content":"","date":"2024-10-19","externalUrl":null,"permalink":"/tags/shortcut/","section":"Tags","summary":"","title":"Shortcut","type":"tags"},{"content":"","date":"2024-10-19","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":"","date":"2024-10-19","externalUrl":null,"permalink":"/tags/gitui/","section":"Tags","summary":"","title":"GitUI","type":"tags"},{"content":"在软件开发的世界中，版本控制是不可或缺的一部分。Git，作为最流行的版本控制系统之一，已经深入到每个开发者的日常工作中。\n尽管 Git 命令行工具功能强大，但有时候，我们也需要一个更直观、更易用的用户界面来提高效率。\n今天，我们将探索一个名为 gitui 的项目，它旨在为 Git 用户提供一个快速、直观且完全在终端内操作的界面。\ngitui：不仅仅是一个界面 # gitui 是一个用 Rust 语言编写的终端界面程序，专为 Git 设计。它不仅仅是一个简单的图形界面，而是一个全面的工具，旨在提供以下特性：\n快速且直观的键盘控制：gitui 允许用户完全通过键盘操作，无需鼠标，大大提高了操作速度。 基于上下文的帮助系统：用户无需记忆复杂的快捷键，gitui 提供了即时的上下文帮助，让操作变得简单直观。 全面的 Git 功能支持：包括提交、暂存、回滚、分支管理、日志浏览等，几乎涵盖了 Git 的所有核心功能。 性能：不仅仅是快速 # 在大型仓库中，传统的 Git 图形界面可能会变得缓慢甚至无响应。gitui 通过异步 Git API 和优化的内存管理，确保了即使在处理大型项目时也能保持流畅的操作体验。在一次性能测试中，gitui 在解析包含超过 900k 提交的 Linux 仓库时，表现出了卓越的性能。\n安装：简单快捷 # gitui 的安装过程非常简单。用户可以通过 Rust 的包管理工具 cargo 轻松安装。此外，gitui 还提供了预编译的二进制文件，支持 Linux、macOS 和 Windows 系统，使得安装过程更加快捷。\n定制：个性化你的工作流 # gitui 支持用户自定义配置，包括颜色主题和按键绑定。用户可以根据自己的喜好和习惯，调整界面和操作方式，使其更加符合个人的工作流。\n社区与支持 # gitui 是一个开源项目，拥有活跃的社区支持。用户可以通过 GitHub 提交问题、参与讨论或贡献代码。\n结语 # gitui 为 Git 用户提供了一个强大而灵活的工具，它不仅提高了工作效率，还增强了用户体验。无论是新手还是资深开发者，gitui 都能成为你日常工作中的得力助手。如果你还没有尝试过 gitui，现在是时候给它一个机会，体验 Git 的全新世界了。\n","date":"2024-10-19","externalUrl":null,"permalink":"/software/gitui-terminal-ui-for-git/","section":"Softwares","summary":"\u003cp\u003e在软件开发的世界中，版本控制是不可或缺的一部分。Git，作为最流行的版本控制系统之一，已经深入到每个开发者的日常工作中。\u003c/p\u003e\n\u003cp\u003e尽管 Git 命令行工具功能强大，但有时候，我们也需要一个更直观、更易用的用户界面来提高效率。\u003c/p\u003e\n\u003cp\u003e今天，我们将探索一个名为 gitui 的项目，它旨在为 Git 用户提供一个快速、直观且完全在终端内操作的界面。\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003egitui：不仅仅是一个界面 \n    \u003cdiv id=\"gitui%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AF%E4%B8%80%E4%B8%AA%E7%95%8C%E9%9D%A2\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#gitui%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AF%E4%B8%80%E4%B8%AA%E7%95%8C%E9%9D%A2\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003egitui 是一个用 Rust 语言编写的终端界面程序，专为 Git 设计。它不仅仅是一个简单的图形界面，而是一个全面的工具，旨在提供以下特性：\u003c/p\u003e","title":"GitUI: Git 在终端下的UI","type":"software"},{"content":"","date":"2024-10-19","externalUrl":null,"permalink":"/tags/rust/","section":"Tags","summary":"","title":"Rust","type":"tags"},{"content":"","date":"2024-10-18","externalUrl":null,"permalink":"/tags/antivirus/","section":"Tags","summary":"","title":"Antivirus","type":"tags"},{"content":"","date":"2024-10-18","externalUrl":null,"permalink":"/tags/clamav/","section":"Tags","summary":"","title":"ClamAV","type":"tags"},{"content":"","date":"2024-10-18","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"虽然 Linux 系统因其安全性和稳健性而被广泛使用，但安装杀毒软件依然是明智的，尤其是在与 Windows 系统共享文件或经常下载未知文件时。\n本文主要介绍如何在 Linux 系统上安装免费的杀毒软件。\n选择合适的免费杀毒软件 # Linux 上流行的免费杀毒软件：\nClamAV：最为知名的开源免费杀毒软件，支持多种 Linux 发行版。它可以扫描病毒、恶意软件以及 Windows 系统上的威胁。 Sophos Antivirus for Linux：虽然是商业软件，但 Sophos 提供了 Linux 版本的免费版，能够检测到多平台的威胁。 Chkrootkit 和 Rkhunter：用于检测系统中的 rootkit 威胁，这些工具可以与其他杀毒软件结合使用，增强系统的安全性。 本文以 ClamAV 为例进行安装和使用的演示，因为它开源且易于配置，适合个人用户和企业环境。\n安装 ClamAV # 首先，更新系统的软件包，并安装 ClamAV。\nUbuntu/Debian 系统：\nsudo apt update sudo apt install clamav clamav-daemon CentOS/RHEL 系统：\n如果使用的是 CentOS 或 RHEL，请执行以下命令：\nsudo yum install epel-release sudo yum install clamav clamav-update Arch Linux 系统：\nArch Linux 用户，执行以下命令：\nsudo pacman -S clamav 更新病毒库 # ClamAV 的病毒库是需要定期更新的，这样它才能识别最新的威胁。安装完 ClamAV 后，首先要更新病毒库。\nsudo freshclam 将下载最新的病毒定义数据库。在大多数系统中，freshclam 会自动更新病毒库，也可以将其添加到定时任务中确保持续更新。\n配置和启动 ClamAV # 为了让 ClamAV 在后台自动扫描文件，我们需要启动 clamav-daemon 服务。\nsudo systemctl start clamav-daemon sudo systemctl enable clamav-daemon 查看运行状态：\nsudo systemctl status clamav-daemon 当我们想要手动扫描时，也可以使用 clamdscan 工具，它会与 clamav-daemon 一起工作，从而减少扫描时间。\n执行手动扫描 # ClamAV 允许你扫描特定目录或文件。以下是一些常用的扫描命令：\n扫描整个系统：\nsudo clamscan -r / 扫描指定目录：\nsudo clamscan -r /path/to/directory -r 参数表示递归扫描文件夹，扫描会包含文件夹内的所有文件。如果希望 ClamAV 在检测到感染文件后自动删除它们，可以使用 `--remove` 参数： sudo clamscan -r --remove /path/to/directory 扫描后的报告输出到文件：\n如果你希望保存扫描结果，可以通过以下命令将报告输出到文件中：\nsudo clamscan -r /path/to/directory \u0026gt; /path/to/report.txt 定时自动扫描 # 可以设置定时任务，让 ClamAV 每天自动扫描指定目录。使用 crontab 进行设置：\nsudo crontab -e 在文件中添加以下内容，设置每天凌晨 2 点自动扫描 /home 目录：\n0 2 * * * /usr/bin/clamscan -r /home --log=/var/log/clamav-scan.log 安全增强（可选） # 还可以结合使用 chkrootkit 或 rkhunter 来检测系统中潜在的 rootkit 威胁：\n安装 Chkrootkit： # sudo apt install chkrootkit sudo chkrootkit 安装 Rkhunter： # sudo apt install rkhunter sudo rkhunter --check 这些工具可以与 ClamAV 配合使用，提供更加全面的安全防护。\n监控与日志 # ClamAV 会在 /var/log/clamav 中生成日志文件，可以通过以下命令查看最近的扫描日志：\ncat /var/log/clamav/clamav.log 根据日志文件中的信息，可以进一步分析潜在的威胁。\n在 Linux 系统上安装杀毒软件，尤其是 ClamAV，是一个简单而有效的安全措施。虽然 Linux 本身相对安全，但额外的防护手段可以减少潜在的安全威胁，特别是在与其他系统共享文件时。通过定期更新病毒库、手动或自动扫描文件、并结合其他安全工具，用户可以确保其系统得到最全面的保护。\n按照本指南，您现在可以在 Linux 系统上有效地安装并运行 ClamAV，确保系统的安全性。\n","date":"2024-10-18","externalUrl":null,"permalink":"/software/installing-free-antivirus-software-on-linux/","section":"Softwares","summary":"\u003cp\u003e虽然 Linux 系统因其安全性和稳健性而被广泛使用，但安装杀毒软件依然是明智的，尤其是在与 Windows 系统共享文件或经常下载未知文件时。\u003c/p\u003e\n\u003cp\u003e本文主要介绍如何在 Linux 系统上安装免费的杀毒软件。\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e选择合适的免费杀毒软件 \n    \u003cdiv id=\"%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E5%85%8D%E8%B4%B9%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E5%85%8D%E8%B4%B9%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eLinux 上流行的免费杀毒软件：\u003c/p\u003e","title":"在 Linux 系统上安装免费杀毒软件","type":"software"},{"content":"","date":"2024-10-17","externalUrl":null,"permalink":"/tags/gddr/","section":"Tags","summary":"","title":"GDDR","type":"tags"},{"content":" 什么是GDDR内存？ # GDDR代表Graphics Double Data Rate ，是一种专门为显卡设计的内存。GDDR内存与大多数计算机使用的DDR内存相似，但它针对显卡的使用进行了优化。GDDR内存通常比DDR内存带宽更高，这意味着它可以一次传输更多数据。\nGDDR6是GPU的最新内存标准，per-pin数据速率峰值为16Gb/s。GDDR6在包括NVIDIA RTX 6000 Ada和AMD Radeon PRO W7900在内的大多数GPU中使用，仍然用于2024年的GPU。\nNVIDIA还与美光合作开发GDDR6X，这是GDDR6的继任者。我们这样说是因为除了从NRZ到PAM4的编码外，两者之间没有任何硬件变化，并且由于NVIDIA是唯一的用户，JEDEC行业标准化没有认可。DDR6X将per-pin带宽提高到21Gb/s。GDDR7是下一个应该被所有人广泛采用的GDDR标准。\n截至2024年，GDDR6和GDDR6X的最大内存总线为384位。GDDR内存是焊接到GPU芯片周围的PCB上的单个芯片。\n什么是HBM内存？ # HBM代表高带宽内存，是一种专门为GPU开发的新型内存。\nHBM内存旨在提供比GDDR内存更大的内存总线宽度，这意味着它可以一次传输更多数据。单个HBM内存芯片不如单个GDDR6芯片快，但这使得它比GDDR内存更节能，这对移动设备来说是一个重要的考虑因素。\nHBM内存位于GPU封装内并堆叠——例如，HBM有四个DRAM（4-Hi）的堆栈，每个有两个128位通道，总宽度为1024位（4个2个通道128位）。由于HBM内存作为内存芯片模块内置在GPU芯片中，因此错误和空间更少。因此，单个GPU不容易像配备GDDR的GPU那样易于扩展内存配置。\n最新采用最多的HBM内存是NVIDIA H100中的HBM3，具有5120位总线和超过2TB/s的内存带宽。HBM3也存在于竞争对手的AMD Instinct MI300X中，具有8192位总线和超过5.3TB/s的内存带宽。英伟达还在其GH200和H200中引入了新的HBM3e内存，作为第一批使用HBM3e的加速器和处理器，具有更大的内存带宽。这些配备HBM内存的硬件正在快速翻新。H100和MI300X等加速器GPU需要HBM的一个重要原因是多个GPU之间的互连性；为了相互通信，宽总线宽度和快速的数据传输速率对于减少将数据从一个GPU传输到另一个GPU的瓶颈至关重要。\nGDDR与HBM内存 # 那么，哪种类型的内存更适合GPU？答案是，这取决于具体的场景。\n配备GDDR内存的GPU通常是：\n更容易访问，因为它们是主流的GPU类型 更便宜，因为GDDR直接焊接在PCB上，而不是GPU封装上。 大多数主流应用程序不会最大化内存带宽。 但GDDR通常消耗更多的能源，效率不那么高。 配备HBM内存的GPU通常是：\n更不容易获得，更利基 非常昂贵，在H100等旗舰加速器中发现。 仅用于需要最多带宽的HPC和高利基工作负载 高效，并提供更大的总线宽度，以并行化每引脚速率。 大多数应用程序不需要HBM内存。对于利用大量数据的工作负载来说，更高的内存带宽是最重要的。仿真、实时分析、密集的人工智能训练、复杂的人工智能推理等工作负载都可以从使用更多的内存带宽中受益。\n同样重要的是要考虑，如果工作负载相互并行，配备GDDR的最快GPU可以正常工作。NVIDIA RTX 6000 Ada是一款功能强大的旗舰GPU，非常适合中小型人工智能训练、渲染、分析、模拟和数据密集型工作负载，内存带宽为960GB/s。插槽具有多GPU设置的服务器或工作站，工作可以并行化和拆分，以获得更高的性能。\n然而，像NVIDIA H100这样的HBM配备GPU可以显著提高企业部署的生产力（尽管成本很高）。更高的性能和更少的等待可以实现更快的突破。ChatGPT等部署利用H100集群协同工作，在给定时间为数百万用户执行实时推理和生成人工智能功能，处理提示并交付实时输出。\n如果没有快速的高带宽内存和峰值性能，企业部署可能会变得非常缓慢，几乎无法使用。一个很好的例子是ChatGPT的发布月份。ChatGPT和OpenAI可能认为他们有足够的HBM启用的NVIDIA GPU来处理大量并发用户，但不知道他们新的生成式AI聊天机器人将有多受欢迎。他们不得不对并发用户数量设置上限，要求网站访问者在扩展基础设施时对服务保持耐心。然而，从这个角度来看，如果没有使用这些高带宽内存互连的GPU，ChatGPT甚至可能是不可能的。\n结论 # 总之，GDDR内存和HBM内存都有其优点和缺点。GDDR内存更便宜，对于需要高带宽但不需要绝对最高性能的应用程序来说是一个不错的选择。另一方面，HBM内存更昂贵，但提供更高的带宽，是需要高性能的应用程序的不二之选。在这两种类型的内存之间进行选择时，重要的是要考虑场景和成本。\n","date":"2024-10-17","externalUrl":null,"permalink":"/hardware/difference-between-gddr-memory-vs-hbm-memory/","section":"Hardwares","summary":"\u003ch2 class=\"relative group\"\u003e什么是GDDR内存？ \n    \u003cdiv id=\"%E4%BB%80%E4%B9%88%E6%98%AFgddr%E5%86%85%E5%AD%98\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFgddr%E5%86%85%E5%AD%98\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eGDDR代表Graphics Double Data Rate ，是一种专门为显卡设计的内存。GDDR内存与大多数计算机使用的DDR内存相似，但它针对显卡的使用进行了优化。GDDR内存通常比DDR内存带宽更高，这意味着它可以一次传输更多数据。\u003c/p\u003e","title":"GDDR 与 HBM 内存之间的区别","type":"hardware"},{"content":"","date":"2024-10-17","externalUrl":null,"permalink":"/tags/h100/","section":"Tags","summary":"","title":"H100","type":"tags"},{"content":"","date":"2024-10-17","externalUrl":null,"permalink":"/series/hardware/","section":"Series","summary":"","title":"Hardware","type":"series"},{"content":"","date":"2024-10-17","externalUrl":null,"permalink":"/tags/hbm/","section":"Tags","summary":"","title":"HBM","type":"tags"},{"content":"AMD经常详细介绍已经发布了一段时间的产品。在Hot Chips 2024上，AMD详细介绍了Instinct MI300X。我们知道MI325X很快就会发布。尽管如此，这仍然是NVIDIA GPU之外唯一一个在AI行业每年销售达到数十亿美元的GPU。AMD上周刚刚收购了生产Microsoft Azure MI300X平台的ZT系统公司。\nHot Chips 2024上展示的AMD Instinct MI300X架构 # AMD 的幻灯片看起来很不错，因此让大家阅读它们，并在讲解过程中添加一些色彩。\nMI300A主要应用于惠普的El Capitan等超级计算机。看起来MI300X是今年该系列40多亿美元收入的主要来源。\nAMD有一个有192MB的HBM3，用于计算等应用的multi-chiplet芯片：\n这是AMD CDNA 3结构的演变：\nAMD拥有8-stack HBM3内存阵列，容量达到192GB。\n下面是用于计算的XCD、Infinity Cache、Infinity Fabric和8个HBM封装的框图。\n下面是缓存和内存层次结构。我们不仅可以看到192GB的HBM3，还可以看到256MB的Infinity缓存，8*4MB的L2缓存等。\nMI300X可以作为单个分区运行，也可以在不同的内存和计算分区中运行。\nAMD目前的大平台是8路MI300X OAM平台。\n这是Instinct系统路线图。MI200在OAM板上也看到了，但它为单个GPU。\n以下是AMD对NVIDIA HGX平台的回答。\n每个GPU有7条链路用于直接连接以及主机链路。\nRAS在大规模AI集群中是一件大事。\n这是AMD的服务器。微软/ ZT系统的MI300平台在这里没有提到。令人失望的是，戴尔仍然没有在其AI平台中提供EPYC。同样明显缺失的还有Wiwynn平台。\nAMD谈论ROCm，它正在变得越来越好。\n在某些情况下，AMD可以击败NVIDIA H100。当然，现在人们开始更频繁地部署NVIDIA H200，AMD方面也致力于MI325X。所以两家公司产品性能的对比可以交给时间来检验。\n这是MPT微调，据AMD称和H100性能相当。\n总结 # MI300X是AMD 2023年的设计，现在它将与H100正面交锋，我们预计两者将在不久的将来被更高内存的版本所取代。据了解，该公司今年会推出MI325X，2025年将推出Instinct MI350 288GB GPU。\n尽管如此，AMD凭借数十亿美元的产品线，已经巩固了自己在AI GPU领域仅次于NVIDIA的地位。\n","date":"2024-10-17","externalUrl":null,"permalink":"/hardware/amd-instinct-mi300x-architecture-at-hot-chips-2024/","section":"Hardwares","summary":"\u003cp\u003eAMD经常详细介绍已经发布了一段时间的产品。在Hot Chips 2024上，AMD详细介绍了Instinct MI300X。我们知道MI325X很快就会发布。尽管如此，这仍然是NVIDIA GPU之外唯一一个在AI行业每年销售达到数十亿美元的GPU。AMD上周刚刚收购了生产Microsoft Azure MI300X平台的ZT系统公司。\u003c/p\u003e\n\n\n\u003ch1 class=\"relative group\"\u003eHot Chips 2024上展示的AMD Instinct MI300X架构 \n    \u003cdiv id=\"hot-chips-2024%E4%B8%8A%E5%B1%95%E7%A4%BA%E7%9A%84amd-instinct-mi300x%E6%9E%B6%E6%9E%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#hot-chips-2024%E4%B8%8A%E5%B1%95%E7%A4%BA%E7%9A%84amd-instinct-mi300x%E6%9E%B6%E6%9E%84\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003eAMD 的幻灯片看起来很不错，因此让大家阅读它们，并在讲解过程中添加一些色彩。\u003c/p\u003e","title":"AMD Instinct MI300X 架构亮相 Hot Chips 2024","type":"hardware"},{"content":"","date":"2024-10-17","externalUrl":null,"permalink":"/tags/instinct/","section":"Tags","summary":"","title":"Instinct","type":"tags"},{"content":"","date":"2024-10-17","externalUrl":null,"permalink":"/tags/mi300x/","section":"Tags","summary":"","title":"Mi300X","type":"tags"},{"content":"AMD、Intel之间的服务器与数据中心处理器大战硝烟再起，战况空前！\nIntel正在陆续发布全新设计的第六代至强6系列，AMD则祭出了同样全新的第五代EPYC 9005系列，可谓针尖对麦芒。\n曾经，AMD在服务器与数据中心市场上几近消失；曾经，Intel几乎完全垄断了整个行业。\n七年来，双方进行了一次又一次激烈交锋，AMD无疑气势更盛，无论产品发布节奏还是规格性能提升，都步步为营，一点一点改变了行业格局，第三方机构统计显示市场份额已经达到34％，合作生态也日渐繁荣。\nIntel在对手的强势挑战之下，也是一路马不停蹄，一度因产品延期导致的混乱也终于过去，正在重新起航。\n这一次，双方都是有备而来，都是气势如虹，究竟谁更胜一筹呢？\n架构设计：都是“大小核” 但又截然不同 # 有趣的是，AMD、Intel都将所谓的“大小核”架构设计引入到了数据中心，但具体做法是完全不同的，这也直接导致双方产品的实际表现迥异。\nAMD的做法是“同构大小核”，之前的第四代EPYC率先吃螃蟹，首次划分出了Zen 4、Zen 4c两个版本，分别对应Genoa EPYC 9004系列、Bergamo EPYC 97x4系列两条产品线。\nZen 4、Zen 4c都基于完全相同的底层微架构，拥有完全相同的IPC性能、ISA指令集、技术特性，唯一的不同就是后者三级缓存更少一些，主频更低一些，同样的5nm工艺下核心面积缩小了大约35％之多。\n对于操作系统和应用软件来说，不需要考虑二者的不同，也不需要专门的适配与优化，可一视同仁，只是将它们用在不同的负载和场景而已，其中Zen 4是常规的通用计算，Zen 4c则主攻高密度云计算。\n第五代EPYC延续了这一理念，并进行了全面升级。\n其中，Zen 5部分升级为4nm工艺，CCD模块从12个增至16个，整体从96核心192线程增至128核心256线程(每CCD还是8个)，三级缓存也从384MB增至512MB(每核心还是4MB)。\nZen 5c部分更是升级为3nm工艺，使得核心面积进一步缩小，可以容纳更多核心，CCD模块从8个增至12个，整体从128核心256线程增至192核心384线程(每CCD还是16个)，三级缓存则从256MB增至384MB(每核心还是2MB)。\nAMD暂未公布Zen 5、Zen 5c的具体核心面积，但相信会和上代类似，至少也得差个1/3。\nIntel走的则是“异构大小核”，在至强历史上首次兵分两路，为此放弃了延续五代的“至强可扩展”的名号，改为更简单直接的“至强6”。\n至强6 6000E系列代号Sierra Forest，首次将E核(能效核)引入数据中心，而且只有E核，专门针对高密度运算、可扩展负载。\n至强6 6000P系列代号Granite Rapids，只使用传统的P核(性能核)，主打高性能计算、AI负载场景。\n它们都延续了以往的分离式模块化架构，其中核心计算模块升级为Intel 3制造工艺(可以粗略地认为大致等于3nm)。\n至强6 E系列首发只有一种计算模块，144核心144线程——是的不支持超线程。\n至强6 P系列则有四种计算模块配置：单个小模块16核心32线程、单个大模块48核心96线程、两个大模块96核心192线程、三个大模块128核心256线程(理论上应该是屏蔽了4个核心以保证良品率)。\n至强6两条线的架构设计截然不同，规格、性能自然差异极大，不过还好，二者共享统一的软件开发平台，从而便于部署。\n有趣的是，这是AMD EPYC诞生七年来，Intel第一次在核心数量上追平了AMD，当然只是说完整大核版本，都是128核心。\n在“小核”方面，AMD仍然多出48个，还是高性能架构，还有超线程，还有更多……\n产品布局：128核心大战128核心、384线程大战288线程 # 接下来，我们看看双方第一批新品的产品线布局，也是很有趣，同样走了截然不同的路线。\n上一代EPYC将Zen 4、Zen 4c分成两条不同的子产品线，各有各的代号，命名规则都不一样，客户可以一眼看出区别。\n这一次，EPYC 9005系列将Zen 5、Zen 5c纳入了统一管理，甚至共用一个代号Turin，就在型号命名上都完全混合在一起。\n事实上这一代两种核心对应的内存、PCIe规格都完全一致，不像上代Zen 4c的精简了不少，自然没必要再区分开。\nAMD也希望通过此举消弭Zen 5、Zen 5c之间的鸿沟，简化客户的选择，毕竟它们是同样的架构、性能、指令、功能，不需要差异对待。\n客户根本不用考虑一款产品到底用了Zen 5还是Zen 5c，只需要根据自己的应用需求，选择不同的核心、频率、缓存、功耗等指标组合，即可找到最适合自己的型号。\n非要区分的话，Zen 5的有22款，Zen 5c的有5款。\n8-72个核心的只有Zen 5，144-192核心的只有Zen 5c，96-128核心的两种都有，其中9x55编号的为Zen 5，9x45编号的为Zen 5c。\n另外值得一提的是，AMD首次将最高频率提升到了惊人的5GHz，对比上代的最高值一下子提升了足足600MHz。\n这对于多核心的数据中心处理器来说是非常难得的，而且一次就有两款做到了，分别是16核心的EPYC 9175F、64核心的EPYC 9575F，非常适合对频率非常敏感的应用。\nIntel则是分成了完全不同的两部分，分别冠以P、E的后缀，一眼就能看出谁是大核、谁是小核。\n至强6900P系列都是大核，最高做到了128核心256线程，最少也有72核心144线程。\n至强6700E系列最多144核心144线程，最少则是64核心64线程。\n规格性能：AMD气势如虹 全面碾压 # 对比来看，五代EPYC 9005在纸面规格参数上就远胜于六代至强6，下边逐一对比下：\n核心数： # EPYC 9005 Zen 5最多128核心256线程，与至强6900P持平。\nZen 5c的最多更是192核心384线程，遥遥领先至强6700E 144核心144线程。\n另外，双方都支持最多双路并行，Intel这次也没有四路、八路。\n频率： # EPYC 9005最高达到了空前的5.0GHz，Zen 5c最高也有3.7GHz。\n至强6就差多了，甚至都没迈过4GHz的门槛，6900P最高统一都是3.9GHz，6700E系列更是只有3.2GHz。\n三级缓存： # EPYC 9005 Zen 5、Zen 5c最多分别做到了512MB、384MB，平均每个核心分别4MB、2MB。\n至强6900P最多504MB，只输了一点点；至强6700E则是最多108MB，还不到对手的三分之一，平均每个核心还不到1MB。\nDDR5内存： # EPYC 9005系列全部统一支持12通道DDR5-6000，最低端也没有阉割。\n至强6900P系列也是12通道，频率更高一些DDR5-6400，还支持新型MRDIMM内存，频率高达8800MHz——这几乎是至强6唯一的优势了。\n至强6700E系列只有8个内存通道，而且只有部分型号保留DDR5-6400的频率，还有一部分降级为DDR5-5600。\nPCIe 5.0通道： # EPYC 9005系列都是128条PCIe 5.0通道，和上代相同。\n至强6900P系列只有96条，至强6700E系列进一步减少到88条。\n热设计功耗： # 双方最高都达到了500W，尤其是完整核心都是在128核心的情况下做到的，彼此彼此。\n不过，Zen 5c 192核心时也有500W，至强6700E 144核心时则是330W，平均到每个核心后者更低一些为2.3W，前者是2.6W。\n平台： # EPYC 9005系列延续了上代的SP5封装接口，客户可以无缝升级，而且按照AMD的做法，这一接口还会延续下去，可能要等到支持DDR6内存的时候才会改变。\n至强6系列不但用了新接口，还分为两种，至强6900P系列是LGA7529，至强6700E系列是LGA4710，不仅上代无法升级，大小核之间也无法通用。\n其他： # EPYC 9005系列全部支持AVX-512指令集，这本来是Intel的独门绝技，但异构大小核的设计让它消失了，至强6也没有。\nEPYC 9005系列全部支持多线程，至强6900P也有，至强6700E就没了。\n至强6内置了一系列的AI加速器，可以让某些特定负载大大加速，EPYC 9005系列则没有，不过AMD有更强大的Instinct加速卡，强调二者搭档发挥各自的优势，Intel GPU加速卡则没能做起来。\n当然，纸面得来终觉浅，最终还要看跑分。\nPhoronix网站进行了多型号的全方位测试，Ubuntu系统下跑了多达140个数据中心测试项目，总结如上。\n可以看出，EPYC 9005系列对比至强6呈现一边倒的压倒性优势，可以说是全程吊打。\n旗舰之争中，EPYC 9755面对MRDIMM-8000高频内存加持的至强6980P，双路、单路优势分别高达40.0％、18.4％，如果将后者换成普通的DDR5-6400，领先幅度更是能进一步提升到41.7％、19.3％。\n夸张的是，只需要一颗EPYC 9755，就能干掉两颗搭配DDR5-6400内存的至强6980P！\n同时，192核心的EPYC 9965、5GHz频率的EPYC 9575F，也都超越了至强6980P，后者领先超过20％。\n有趣的是，EPYC的双路并行效率要高得多。\n遗憾的是没有加入至强6700E系列的测试，但不难想象，即便加上也是被欺负的命。\n功耗方面，五代EPYC也有着绝对优势，远远低于至强6。\n无论是192核心的EPYC 9965，还是5GHz频率的EPYC 9575F，实际功耗都没有超过400W的热设计功耗指标。\n即便是128核心旗舰的EPYC 9755，功耗也只有450W左右，远低于500W的热设计功耗。\n至强6980P则正好达到了500W，这就是官方标称的热设计功耗。\n展望未来：只是刚刚开始 都还有杀手锏 # 通过前述种种对比可是看出，EPYC 9005系列在至强6系列面前相当霸道，无论是规格参数、技术，还是实际性能、能效，又或者平台便利性，都实现了全方位的碾压，甚至可以说是吊打，Intel依然毫无还手之力。\n而且，这只是双方新一代平台的开端，各自都还有杀手锏级的后招。\nAMD没有透露具体情况，但显然会有适合极高性能计算的第三代3D缓存版本。\n上一代就做到了768MB 3D缓存，加上原生的384MB合计达1152MB，也是史上第一次超过1GB。\n这一代随着CCD模块数量的增加，3D缓存有望增至1024MB，加上原生的512MB，合计可达1536MB，也就是整整1.5GB！\nIntel方面，明年一季度会发布至强 6900E系列，两个计算模块，最高达288核心288线程，在核心数量上创造新纪录。\n但是因为不支持多线程技术，它的线程数还是稍逊一筹，再考虑到AMD多线程技术的效率，192核心384线程超过它问题不大。\n另外还有至强6700P、6500P、6300P系列，显然核心数不会超过128个。\n按照AMD的说法，EPYC平台已经拥有超过350个OEM平台、超过950个云实例，无论是大规模云厂商还是大型科技/行业企业，都有大量的深度合作伙伴，是实至名归的“超大规模数据中心第一处理器”。\nIntel方面没有明确数据，但凭借长期以来雄厚的积累，以及依然把持住2/3的市场，合作案例肯定更多、更深入。\n仅仅七年，AMD EPYC就吃下了超过1/3的市场，对于一向看重产品和平台品质、看重长期稳定性的服务器与数据中心客户来说，能做到这种程度只能说是一个奇迹。\n更可怕的是，AMD EPYC在产品力上几乎找不到缺点和短板，几乎每一个点都让对手望尘莫及，相信还会拿到更多的市场。\n七年五代产品，AMD将核心数量提升了6倍，性能更是提升了几乎11倍，一路狂奔根本停不下来的架势。\n","date":"2024-10-16","externalUrl":null,"permalink":"/hardware/amd-fifth-gen-epyc-vs-intel-sixth-gen-xeon/","section":"Hardwares","summary":"\u003cp\u003eAMD、Intel之间的服务器与数据中心处理器大战硝烟再起，战况空前！\u003c/p\u003e\n\u003cp\u003eIntel正在陆续发布全新设计的第六代至强6系列，AMD则祭出了同样全新的第五代EPYC 9005系列，可谓针尖对麦芒。\u003c/p\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./amd-epyc-vs-intel-xeon-1.png\" alt=\"AMD fifth Gen epyc vs Intel Sixth Gen Xeon\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./amd-epyc-vs-intel-xeon-2.png\" alt=\"AMD fifth Gen epyc vs Intel Sixth Gen Xeon\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e","title":"AMD五代EPYC对决Intel六代至强","type":"hardware"},{"content":"","date":"2024-10-16","externalUrl":null,"permalink":"/tags/epyc-9005/","section":"Tags","summary":"","title":"EPYC 9005","type":"tags"},{"content":"","date":"2024-10-16","externalUrl":null,"permalink":"/tags/xeon-6/","section":"Tags","summary":"","title":"Xeon 6","type":"tags"},{"content":"","date":"2024-10-16","externalUrl":null,"permalink":"/tags/zen-5/","section":"Tags","summary":"","title":"Zen 5","type":"tags"},{"content":"","date":"2024-10-16","externalUrl":null,"permalink":"/tags/amd/","section":"Tags","summary":"","title":"AMD","type":"tags"},{"content":"","date":"2024-10-16","externalUrl":null,"permalink":"/tags/ecosystem/","section":"Tags","summary":"","title":"Ecosystem","type":"tags"},{"content":"","date":"2024-10-16","externalUrl":null,"permalink":"/tags/intel/","section":"Tags","summary":"","title":"Intel","type":"tags"},{"content":"英特尔与AMD一直是业界两大强劲的竞争对手，然而，近日这两家公司却罕见地携手合作，共同宣布成立一个新的x86咨询小组，旨在确保未来x86指令集架构（ISA）的统一和兼容性。这一举措在2024年OCP峰会上正式公布，引起了广泛关注。该小组的成员包括博通、Meta、Oracle、微软、戴尔、HPE、联想、谷歌、红帽等。\nx86指令集架构自诞生以来已有46年历史，已成为个人电脑和数据中心通用计算的最普遍标准。英特尔和AMD作为仅有的两家大批量生产新处理器的主要x86架构授权商，形成了双头垄断的格局。然而，随着x86生态系统在消费者和数据中心市场面临来自Arm和RISC-V的巨大压力，两家公司意识到加强合作、减少定制ISA实现带来的问题至关重要。\n当前消费科技巨头苹果、移动芯片设计商高通以及云计算巨头如AWS、微软和谷歌等都在为PC和云市场设计自己的基于Arm的CPU。此外，另一家移动芯片设计商联发科已公开表示计划为Windows PC推出基于Arm的CPU，并正在与Nvidia合作。这进一步加剧了英特尔和AMD的压力。在过去一年中，这两家公司都推出了自己的高核心密度和高效率处理器。AMD去年推出了其EPYC“Bergamo”芯片，英特尔最近推出了其Xeon 6 E核心芯片。\n在联合声明中，英特尔和AMD表示，该小组将专注于寻找扩展x86生态系统的新方法，实现跨平台兼容性，简化软件开发，并为开发者提供一个平台来识别架构需求和功能。英特尔首席执行官帕特·基辛格表示：“我们正面临x86架构和生态系统几十年来最重大的转变之一，需要达到新的定制化、兼容性和可扩展性水平，以满足当前和未来的客户需求。”\nAMD董事长兼首席执行官苏姿丰在声明中表示：“成立x86生态系统咨询小组将确保x86架构继续发展成为开发人员和客户的首选计算平台。”\n新组织打算对 x86 ISA 的一些新增和修改进行标准化，其中包括几项已经在进行的简化工作。修改和协作领域尚未确定，但有很多明确的候选方案可以进行讨论。\n例如，AMD 有其 Supervisor Entry Extensions，旨在清除 ISA 中的一些旧垃圾，而英特尔有其灵活返回和事件传递 (FRED)代码，其目标类似。英特尔甚至已经开始开发 X86S，这是一种简化的 64 位实现，旨在清除更多遗留垃圾。\n此外x86 ISA 也在不断推进新的功能，在这方面，英特尔和 AMD 之间的合作可能变得更加重要。例如，英特尔最近推出了 AMX，这是一种矩阵数学扩展，可显著提高 AI 推理工作负载的性能。未来肯定会有更新的和尚未预见到的新增功能，特别是关于支持 AI 操作的各种扩展。\n在以动态AI工作负载、定制芯片以及3D封装和系统架构进步为特征的当今环境中，强大且不断扩展的x86生态系统比以往任何时候都更为重要。该顾问小组将团结行业领导者，通过一套更加统一的指令和架构接口来塑造x86的未来，促进开发者的创新。这一举措将增强x86产品的兼容性、可预测性和一致性。\n预期成果包括：\n增强客户在硬件和软件方面的选择和兼容性，加速他们从新功能中获益的能力。 简化架构指南，增强英特尔和AMD的x86产品之间的软件一致性和接口。 使新功能能够更好、更高效地集成到操作系统、框架和应用程序中。 英特尔和AMD虽然是竞争对手，但也有着合作的历史，例如PCIe、ACPI和USB等标准正是整个行业紧密协作的结果。\n总的来说，英特尔与AMD携手成立x86咨询小组是一个重要的里程碑，标志着两家公司在推动x86架构统一和兼容性方面迈出了重要一步。未来，随着更多公司和功能的加入，x86生态系统将更加开放、统一和强大。然而，考虑到现代处理器的设计周期较长，想要咨询小组立马发挥关键作用应该很难，但至少这是一个积极的开始。\n","date":"2024-10-16","externalUrl":null,"permalink":"/hardware/intel-and-amd-launch-x86-ecosystem-advisory-group/","section":"Hardwares","summary":"\u003cp\u003e英特尔与AMD一直是业界两大强劲的竞争对手，然而，近日这两家公司却罕见地携手合作，共同宣布成立一个新的x86咨询小组，旨在确保未来x86指令集架构（ISA）的统一和兼容性。这一举措在2024年OCP峰会上正式公布，引起了广泛关注。该小组的成员包括博通、Meta、Oracle、微软、戴尔、HPE、联想、谷歌、红帽等。\u003c/p\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./x86-ecosystem-advisory-group.png\" alt=\"Intel and AMD Launch x86 Ecosystem Advisory Group\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003ex86指令集架构自诞生以来已有46年历史，已成为个人电脑和数据中心通用计算的最普遍标准。英特尔和AMD作为仅有的两家大批量生产新处理器的主要x86架构授权商，形成了双头垄断的格局。然而，随着x86生态系统在消费者和数据中心市场面临来自Arm和RISC-V的巨大压力，两家公司意识到加强合作、减少定制ISA实现带来的问题至关重要。\u003c/p\u003e\n\u003cp\u003e当前消费科技巨头苹果、移动芯片设计商高通以及云计算巨头如AWS、微软和谷歌等都在为PC和云市场设计自己的基于Arm的CPU。此外，另一家移动芯片设计商联发科已公开表示计划为Windows PC推出基于Arm的CPU，并正在与Nvidia合作。这进一步加剧了英特尔和AMD的压力。在过去一年中，这两家公司都推出了自己的高核心密度和高效率处理器。AMD去年推出了其EPYC“Bergamo”芯片，英特尔最近推出了其Xeon 6 E核心芯片。\u003c/p\u003e\n\u003cp\u003e在联合声明中，英特尔和AMD表示，该小组将专注于寻找扩展x86生态系统的新方法，实现跨平台兼容性，简化软件开发，并为开发者提供一个平台来识别架构需求和功能。英特尔首席执行官帕特·基辛格表示：“我们正面临x86架构和生态系统几十年来最重大的转变之一，需要达到新的定制化、兼容性和可扩展性水平，以满足当前和未来的客户需求。”\u003c/p\u003e\n\u003cp\u003eAMD董事长兼首席执行官苏姿丰在声明中表示：“成立x86生态系统咨询小组将确保x86架构继续发展成为开发人员和客户的首选计算平台。”\u003c/p\u003e\n\u003cp\u003e新组织打算对 x86 ISA 的一些新增和修改进行标准化，其中包括几项已经在进行的简化工作。修改和协作领域尚未确定，但有很多明确的候选方案可以进行讨论。\u003c/p\u003e","title":"英特尔 和 AMD 宣布合作，共同成立生态小组","type":"hardware"},{"content":"Intel前脚刚发布至强6 6000系列，AMD就带来了Zen 5/5c架构的五代EPYC 9005系列，彼此针锋相对，后者显然更胜一筹。\nPhoronix提前测试了多颗EPYC 9005的样品，结果自然不出所料，丝毫不对手任何情面。\n测试的新SKU一共三颗，分别是：\nEPYC 9965： Zen 5c顶级旗舰，192核心384线程，384MB三级缓存，2.25-3.7GHz频率，500W热设计功耗。 EPYC 9575F： 最高频率型号之一，Zen 5，64核心128线程，256MB三级缓存，3.3-5.0GHz频率，400W热设计功耗。 EPYC 9755： Zen 5顶级旗舰，128核心256线程，512MB三级缓存，2.7-4.1GHz频率，500W热设计功耗。 至强6980P也是新一代旗舰，P性能核设计，128核心256线程，504MB三级缓存，2.0-3.9GHz频率，500W热设计功耗。\n测试系统是Ubuntu 24.04 LTS，系统内核6.12。测试项目多达140个。\n直接看结果汇总：\n无论双路还是单路，EPYC 9755都是一马当先，优势大到不可思议，面对搭配超高频率MRDIMM 8000MHz内存的至强6980P，优势分别高达40.0％、18.4％，后者换成普通的DDR5-6400，领先幅度还会略微提高到41.7％、19.3％。\n事实上，只需一颗EPYC 9755，就能干掉两颗至强6980P DDR5-6400！\nEPYC 9965、EPYC 9575F同样也是一骑绝尘，全都能将至强6980斩落马下，双路EPYC 9575F对比双路至强6980P(MR-DIMM 8000)，优势仍有22.6％，单路对比也只落后8.4％。\n这从另一方面可以看出，五代EPYC的双路效率非常高，远胜于至强6。\n对比上代产品，128核心EPYC 9755相比于96核心EPYC 9654，都是旗舰，提升幅度高达恐怖的63.1％。\n192核心、Zen 5c架构的EPYC 9965对比128核心、Zen 4c架构的EPYC 9754，提升幅度同样有不可思议的47.6％。\n有趣的是，一颗EPYC 9965就能超过两颗EPYC 9754/9654，领先幅度分别为8.4％、17.7％。\n功耗方面，五代EPYC也有着绝对优势，远远低于至强6。\n无论是192核心的EPYC 9965，还是5GHz频率的EPYC 9575F，实际上都控制在了400W之内，128核心的EPYC 9755也只有450W左右，可以说热设计功耗留足了空间。\n至强6980P则刚好达到了500W。\n可以说，AMD EPYC在性能、功耗、能效等指标上已经处于绝对的统治地位，Intel至强短期内一点办法都没有。\n后续，Intel会推出288核心288线程的顶级型号，不过采用能效核设计，192核心384线程的EPYC 9965领先之目测不会有什么压力。\n","date":"2024-10-15","externalUrl":null,"permalink":"/hardware/amd-zen5-epyc-first-test-result-review/","section":"Hardwares","summary":"\u003cp\u003eIntel前脚刚发布至强6 6000系列，AMD就带来了Zen 5/5c架构的五代EPYC 9005系列，彼此针锋相对，后者显然更胜一筹。\u003c/p\u003e\n\u003cp\u003ePhoronix提前测试了多颗EPYC 9005的样品，结果自然不出所料，丝毫不对手任何情面。\u003c/p\u003e\n\u003cp\u003e测试的新SKU一共三颗，分别是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEPYC 9965：\n\u003cul\u003e\n\u003cli\u003eZen 5c顶级旗舰，192核心384线程，384MB三级缓存，2.25-3.7GHz频率，500W热设计功耗。\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eEPYC 9575F：\n\u003cul\u003e\n\u003cli\u003e最高频率型号之一，Zen 5，64核心128线程，256MB三级缓存，3.3-5.0GHz频率，400W热设计功耗。\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eEPYC 9755：\n\u003cul\u003e\n\u003cli\u003eZen 5顶级旗舰，128核心256线程，512MB三级缓存，2.7-4.1GHz频率，500W热设计功耗。\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./AMD-EPYC-9005-SKU-1.png\" alt=\"AMD EPYC 9005 SKU\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e","title":"AMD Zen5 EPYC首测","type":"hardware"},{"content":"","date":"2024-10-15","externalUrl":null,"permalink":"/tags/eypc/","section":"Tags","summary":"","title":"EYPC","type":"tags"},{"content":"","date":"2024-10-15","externalUrl":null,"permalink":"/tags/mrdimm/","section":"Tags","summary":"","title":"MRDIMM","type":"tags"},{"content":"","date":"2024-10-15","externalUrl":null,"permalink":"/tags/gaudi-3/","section":"Tags","summary":"","title":"Gaudi 3","type":"tags"},{"content":"早在4月份，Intel就宣布了新一代AI加速器Gaudi 3，现在它终于发布了，详细的规格参数也已出炉，竞争对手直指NVIDIA H100 GPU加速器，当然后者的Blackwell系列也要上量了。\n数据显示，预计到2030年，全球半导体市场规模将达1万亿美元，AI是主要推动力，不过在2023年，只有10％的企业能够成功将其AIGC项目产品化。\nIntel现有的Gaudi 2诞生于2022年5月，并于2023年7月正式引入中国，拥有极高的深度学习性能、效率，以及极高的性价比。\n它采用台积电7nm工艺制造，集成24个可编程的Tenor张量核心(TPC)、48MB SRAM缓存、21个10万兆内部互连以太网接口(ROCEv2 RDMA)、96GB HBM2E高带宽内存(总带宽2.4TB/s)、多媒体引擎等，支持PCIe 4.0 x16，最高功耗800W，可满足大规模语言模型、生成式AI模型的强算力需求。\nGaudi 3的规格提升幅度堪称跨越式的，制造工艺从台积电7nm来到台积电5nm，MME(矩阵乘法引擎)从2个增加到8个，虽然每个MME内部的TPC(张量处理核心)从12个减少到8个，但是总数从24个大幅增加到了64个，另外媒体解码器差从8个增至14个。\n内置SRAM缓存容量翻番至96MB，带宽翻倍至12.8TB/s。\n核心性能方面，MME BF16/FP8都是1835 TFlops(每秒1.835千万亿次)，矢量BF16则是28.8 TFlops(每秒28.8万亿次)，分别提升了3.2倍、1.1倍、1.6倍。\nHBM2E高带宽内存容量从96GB增加到128GB(八颗)，带宽也顺应增加来到惊人的3.7TB/s。\n24个200Gb RDMA网络接口，双向网络互连带宽1.2TB/s，主机接口峰值双向带宽128GB/s，系统总线升级为PCIe 5.0 x16。\n按照官方说法，Gaudi 3对比NVIDIA H100，LLM大模型推理性能领先50％、训练时间快40％，性价比则是对手的2倍。\n开发方面，无缝兼容PyTorch框架、Hugging Face Transformer和扩散模型。\nGaudi 3还可大幅缩短70亿和130亿参数Llama2模型、1750亿参数GPT-3模型的训练时间。\n在Llama 70亿/700亿参数、Falcon 1800亿参数大型语言模型上，Gaudi 3的推理吞吐量和能效也都非常出色。\nGaudi 3还提供开放的、基于社区的软件，以及行业标准以太网网络，可以灵活地从单个节点扩展到拥有数千个节点的集群、超级集群和超大集群，支持大规模的推理、微调和训练。\nGaudi 3加速器提供三种部署形态，一是OAM 2.0标准夹层卡，被动散热峰值功耗900W，液冷散热峰值功耗1200W，支持48个112Gb PAM4SerDes网络链接。\n二是HLB-325通用基板，支持八颗Gaudi 3，具体功耗未披露。\n三是HL-338扩展卡，PCIe 5.0 x16接口，被动散热峰值功耗600W，还可以四卡互连。\n目前，Intel Gaudi加速器的行业客户及合作伙伴有NAVER、博世(Bosch)、IBM、Ola/Krutrim、NielsenIQ、Seekr、IFF、CtrlS Group、Bharti Airtel、Landing AI、Roboflow、Infosys，等等。\nIntel此前已宣布，IBM将会在其云服务中部署Gaudi 3加速器。\n另有消息称，Gaudi 3加速器也有中国特供版，其中OAM模组、PCIe模组的峰值功耗都限制至450W，算力自然也会大打折扣，但暂无更进一步说法。\n","date":"2024-10-15","externalUrl":null,"permalink":"/hardware/intel-gaudi-3-ai-accelerator/","section":"Hardwares","summary":"\u003cp\u003e早在4月份，Intel就宣布了新一代AI加速器Gaudi 3，现在它终于发布了，详细的规格参数也已出炉，竞争对手直指NVIDIA H100 GPU加速器，当然后者的Blackwell系列也要上量了。\u003c/p\u003e\n\u003cp\u003e数据显示，预计到2030年，全球半导体市场规模将达1万亿美元，AI是主要推动力，不过在2023年，只有10％的企业能够成功将其AIGC项目产品化。\u003c/p\u003e\n\u003cp\u003eIntel现有的Gaudi 2诞生于2022年5月，并于2023年7月正式引入中国，拥有极高的深度学习性能、效率，以及极高的性价比。\u003c/p\u003e\n\u003cp\u003e它采用台积电7nm工艺制造，集成24个可编程的Tenor张量核心(TPC)、48MB SRAM缓存、21个10万兆内部互连以太网接口(ROCEv2 RDMA)、96GB HBM2E高带宽内存(总带宽2.4TB/s)、多媒体引擎等，支持PCIe 4.0 x16，最高功耗800W，可满足大规模语言模型、生成式AI模型的强算力需求。\u003c/p\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./Intel-Gaudi-3-AI-Accelerator-2.png\" alt=\"Intel Gaudi 3 AI Accelerator\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003eGaudi 3的规格提升幅度堪称跨越式的，制造工艺从台积电7nm来到台积电5nm，MME(矩阵乘法引擎)从2个增加到8个，虽然每个MME内部的TPC(张量处理核心)从12个减少到8个，但是总数从24个大幅增加到了64个，另外媒体解码器差从8个增至14个。\u003c/p\u003e","title":"Intel正式发布Gaudi 3 AI加速器","type":"hardware"},{"content":"","date":"2024-10-13","externalUrl":null,"permalink":"/tags/hbm4/","section":"Tags","summary":"","title":"HBM4","type":"tags"},{"content":"","date":"2024-10-13","externalUrl":null,"permalink":"/tags/tsmc/","section":"Tags","summary":"","title":"TSMC","type":"tags"},{"content":"台积电HBM4内存的推出将带来多项重大变革，其中最引人注目的就是其内存接口的大幅扩展。第四代内存技术接口从1024位扩展到2048位，这标志着HBM4内存的设计和生产将面临新的挑战，为了适应这一变化，芯片制造商必须采用更新、更高级的封装技术。\n在2024年的欧洲技术研讨会上，台积电透露了其为HBM4制造的base die一些细节，这些芯片将采用逻辑工艺制造，台积电计划利用其N12和N5工艺的改进版本来生产这些芯片。这将使台积电在HBM4的生产领域占据优势，因为现有的内存制造设施均无法做到经济高效地生产这种先进逻辑芯片。\n对于HBM4的首批产品封装，台积电将采用N12FFC+和N5两种不同的制造工艺。尽管这两种工艺都是为了将HBM4E内存与新一代的AI和高性能计算处理器相结合，但它们在连接AI和高性能计算应用的高性能处理器的内存方面发挥着不同的作用。\n台积电的设计和技术平台高级总监透露：“公司正与美光、三星和SK海力士等主要HBM内存供应商合作，利用先进的工艺节点推进HBM4内存技术的全面整合。N12FFC+工艺的基础芯片在成本效益上具有优势，能够满足HBM的性能需求，而N5工艺的基础芯片则能在保持HBM4速度的同时，提供更复杂的逻辑功能并大幅降低能耗。\n台积电的N12FFC+工艺（12纳米FinFET Compact Plus，虽然归类于12纳米技术，但技术基础源自其成熟的16纳米FinFET生产线）生产的基础芯片，将用于在系统级芯片（SoCs）旁的硅中介层上安装HBM4内存堆栈。台积电相信，其12FFC+工艺非常适合实现HBM4的性能，使内存制造商能够构建12-Hi（48GB）和16-Hi（64GB）堆栈，每个堆栈的带宽超过2TB/秒。\n台积电高级总监提到：“我们也在为HBM4优化CoWoS-L和CoWoS-R技术，CoWoS-L和CoWoS-R技术都采用超过八层的布线设计以确保HBM4超过2000个的互连和信号完整性。”\n使用N12FFC+工艺的HBM4基础芯片对于采用台积电CoWoS-L或CoWoS-R先进封装技术构建系统级封装（SiPs）至关重要，这些技术提供的中介层面积可达8倍光罩尺寸，足以容纳多达12个HBM4内存堆栈。据报道，HBM4能够以 14mA的电流实现6GT/s的数据传输速率。\n台积电还与Cadence、Synopsys和Ansys等EDA公司合作，确保HBM4通道的信号完整性、IR/EM和热准确性。\n与此同时，内存制造商还可以选择使用台积电的N5工艺来生产HBM4 base die。N5工艺制造的基础芯片将集成更多逻辑功能，减少功耗并提供更高的性能。最重要的是，这种先进的工艺技术将实现非常小的互连间距，约为6到9微米，这将使N5基础芯片能够与直接键合技术结合使用，允许HBM4直接3D堆叠在逻辑芯片上从而大幅提升内存性能，这将为不断追求更高内存带宽的AI和HPC芯片带来巨大的提升。\n据悉，台积电与SK海力士在HBM4 base die上已有合作，并且台积电也可能为美光生产HBM4 base die。至于三星拥有自己的先进逻辑生产线，台积电与其合作的可能性相对较小。\n","date":"2024-10-13","externalUrl":null,"permalink":"/hardware/tsmc-readies-hbm4-base-dies-at-12nm-and-5nm/","section":"Hardwares","summary":"\u003cp\u003e台积电HBM4内存的推出将带来多项重大变革，其中最引人注目的就是其内存接口的大幅扩展。第四代内存技术接口从1024位扩展到2048位，这标志着HBM4内存的设计和生产将面临新的挑战，为了适应这一变化，芯片制造商必须采用更新、更高级的封装技术。\u003c/p\u003e\n\u003cp\u003e在2024年的欧洲技术研讨会上，台积电透露了其为HBM4制造的base die一些细节，这些芯片将采用逻辑工艺制造，台积电计划利用其N12和N5工艺的改进版本来生产这些芯片。这将使台积电在HBM4的生产领域占据优势，因为现有的内存制造设施均无法做到经济高效地生产这种先进逻辑芯片。\u003c/p\u003e\n\u003cp\u003e对于HBM4的首批产品封装，台积电将采用N12FFC+和N5两种不同的制造工艺。尽管这两种工艺都是为了将HBM4E内存与新一代的AI和高性能计算处理器相结合，但它们在连接AI和高性能计算应用的高性能处理器的内存方面发挥着不同的作用。\u003c/p\u003e\n\u003cp\u003e台积电的设计和技术平台高级总监透露：“公司正与美光、三星和SK海力士等主要\u003ca href=\"https://www.kad8.com/hardware/difference-between-gddr-memory-vs-hbm-memory/\" target=\"_blank\"\u003eHBM\u003c/a\u003e内存供应商合作，利用先进的工艺节点推进HBM4内存技术的全面整合。N12FFC+工艺的基础芯片在成本效益上具有优势，能够满足HBM的性能需求，而N5工艺的基础芯片则能在保持HBM4速度的同时，提供更复杂的逻辑功能并大幅降低能耗。\u003c/p\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./TSMC-Logic-for-HBM4-Base-Die.png\" alt=\"TSMC Logic for HBM4 Base Die\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e台积电的N12FFC+工艺（12纳米FinFET Compact Plus，虽然归类于12纳米技术，但技术基础源自其成熟的16纳米FinFET生产线）生产的基础芯片，将用于在系统级芯片（SoCs）旁的硅中介层上安装HBM4内存堆栈。台积电相信，其12FFC+工艺非常适合实现HBM4的性能，使内存制造商能够构建12-Hi（48GB）和16-Hi（64GB）堆栈，每个堆栈的带宽超过2TB/秒。\u003c/p\u003e\n\u003cp\u003e台积电高级总监提到：“我们也在为HBM4优化CoWoS-L和CoWoS-R技术，CoWoS-L和CoWoS-R技术都采用超过八层的布线设计以确保HBM4超过2000个的互连和信号完整性。”\u003c/p\u003e\n\u003cp\u003e使用N12FFC+工艺的HBM4基础芯片对于采用台积电CoWoS-L或CoWoS-R先进封装技术构建系统级封装（SiPs）至关重要，这些技术提供的中介层面积可达8倍光罩尺寸，足以容纳多达12个HBM4内存堆栈。据报道，HBM4能够以 14mA的电流实现6GT/s的数据传输速率。\u003c/p\u003e\n\u003cp\u003e台积电还与Cadence、Synopsys和Ansys等EDA公司合作，确保HBM4通道的信号完整性、IR/EM和热准确性。\u003c/p\u003e\n\u003cp\u003e与此同时，内存制造商还可以选择使用台积电的N5工艺来生产HBM4 base die。N5工艺制造的基础芯片将集成更多逻辑功能，减少功耗并提供更高的性能。最重要的是，这种先进的工艺技术将实现非常小的互连间距，约为6到9微米，这将使N5基础芯片能够与直接键合技术结合使用，允许HBM4直接3D堆叠在逻辑芯片上从而大幅提升内存性能，这将为不断追求更高内存带宽的AI和HPC芯片带来巨大的提升。\u003c/p\u003e","title":"台积电要用5nm先进封装HBM4内存芯片","type":"hardware"},{"content":" VxWorks The Leading RTOS The industry's most widely deployed RTOS. VxWorks has been used to ensure the security, safety, and reliability you need to design and build mission-critical embedded systems that simply must work.\nVxWorks是全球首个且唯一一个利用容器部署应用程序的实时操作系统。\n最新版VxWorks支持OCI容器，利用类似IT的传统技术，即可更高效更优质地开发和部署智能边缘软件，且不会影响确定性和性能。了解为何研究机构VDC再次将VxWorks评为最佳边缘部署实时操作系统。\n","date":"2024-10-04","externalUrl":null,"permalink":"/","section":"VxWorks Overview","summary":"\u003cblockquote\u003e\nVxWorks The Leading RTOS\u003c/br\u003e\nThe industry's most widely deployed RTOS.\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.vxworks6.com\" target=\"_blank\"\u003eVxWorks\u003c/a\u003e has been used to ensure the security, safety, and reliability you need to design and build mission-critical embedded systems that simply must work.\u003c/p\u003e","title":"VxWorks Overview","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"}]