<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VxWorks on VxWorks 7</title>
    <link>https://www.vxworks7.com/tags/vxworks/</link>
    <description>Recent content in VxWorks on VxWorks 7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 24 Dec 2022 04:04:08 -0500</lastBuildDate><atom:link href="https://www.vxworks7.com/tags/vxworks/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>欢迎加入 VxWorks 俱乐部！</title>
      <link>https://www.vxworks7.com/post/welcome-to-vxworks-club/</link>
      <pubDate>Mon, 02 May 2022 15:59:41 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/welcome-to-vxworks-club/</guid>
      <description>欢迎来到 北南南北 文档站点！ 相关文章来源于 VxWorks 俱乐部  ，也可能发布于 AI 嵌入式开发  ，专注于技术分享和交流。
免责声明 所有资源均来自网络，版权归原作者，如有侵权，请联系删除！
欢迎投稿  欢迎广大网友投稿 欢迎加入网友微信群  </description>
    </item>
    
    <item>
      <title>PCI总线在VxWorks中的实现</title>
      <link>https://www.vxworks7.com/post/bsp/pci-bus-implementation-in-vxworks.html</link>
      <pubDate>Sat, 24 Dec 2022 04:04:08 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/pci-bus-implementation-in-vxworks.html</guid>
      <description>在最近发布的BSP中，风河公司基本上都提供了对PCI BUS的支持，本文主要探讨PCI BUS在VxWorks系统中的实现。
PCI Address Space and Memory Mapping PCI BUS有三种地址空间：IO Space、Memory Space and Configuration Space。每个PCI设备都通过Configuration Space中的Base Address Registers(BAR)映射到内存或者IO空间，这样就不用像ISA BUS那样，通过硬件Jumpers来设置板卡的Address。PCI BUS的所有配置基本上都是通过Configuration Space的寄存器来控制的。但是，每个PCI Device都必须先配置才能使用，这意味着PCI Device的基地址和中断都必须被系统分配到资源，并且PCI Device能够对正常的PCI配置操作做出回应。
WRS提供一个名为pciConfigLib.c的标准库给用户访问PCI配置空间，该标准库使用PCI规范中定义的访问机制1和机制2来支持Host-Bridge，风河本身提供的第三个访问机制，名为机制0是针对非标准PCI Bridge的，机制0主要是靠调用BSP包中的特定routine来实现PCI配置空间的read/write的，与此同时，这些特定的routine接口和前面的介绍的机制1和机制2是相同的。pciConfigLib.c提供访问PCI配置空间内任何寄存器的routine，该库同样提供一些用于扫描PCI BUS寻找特定PCI 设备实例的方法，另外该库也提供一些简单的配置接口用于配置简单的PCI设备。
PCI Interrupt Handling PCI 规范并没有详细说明PCI中断信号是如何路由到中断控制器的。每个PCI设备都有4个可用的中断PIN，分别命名为A,B,C和D。每个单功能的PCI设备都被要求使用中断PIN A来产生中断，而对于多功能PCI设备，每个功能使用一个中断PIN，但是根据PCI规范，每个PCI设备最多可提供8个功能，这样就必须两个功能共用一个中断PIN。当产生PCI中断时，PCI中断处理系统需要调用多个中断服务程序，那么最简单的方法就是每个ISR都调用一遍，ISR必须有能力判断该次中断源是否是自己产生的，如果不是，则立即返回，并接着会调用下一个中断服务程序。
pciIntLib.c提供一些routine来挂接多个ISR到一个中断LINE上，该库通过挂接一个特殊的ISR，该ISR会遍历一个中断链表，所有共用同一个中断的ISRs都被放在这个链表中。pciIntConnect()用于将设备的ISR挂接到中断链表上，而pciIntDisConnect()用于删除中断链表上的一个ISR。
例子：
pciInitConnect(Vector, ISR1, PARAM1); pciInitConnect(Vector, ISR2, PARAM2); pciInitConnect(Vector, ISR3, PARAM3);   上面3个语句把ISR1，ISR2,和ISR3分别挂接到中断向量为Vector的链表intList里面，那么当中断发生时，会执行下面一个函数：
void sISR(void) { while(intList-&amp;gt;next !=NULL) { (*intList-&amp;gt;INT_ISR)(PARAM);/*分别调用ISR1，ISR2，ISR3，没写很具体，只是个大概理解*/ } } VxWorks中的PCI 配置策略 在BSP中，必须定义宏INCLUDE_PCI来支持PCI BUS，宏PCI_CFG_TYPE必须定义为一下几种类型：
静态配置：PCI_CFG_FORCE 这种方式要求程序员必须手动通过数据表、配置宏或者其他方法来配置每个PCI设备，PCI设备的基地址和使用的中断号必须事先知道。
动态配置：PCI_CFG_AUTO 这种配置方法是最常用的，它通过扫描PCI总线并且给每一个found的设备赋予独立的内存或者IO地址，这也是典型的X86 BIOS的PCI初始化方式。程序员并不需要事先知道分配给PCI设备的系统资源，这个功能主要被实现在pciAutoConfigLib.c模块中。
未配置：PCI_CFG_NONE 这种方法主要是预留给那些不能使用上面的VxWorks配置方法的设备的。此时，所有的PCI设备都是在VxWorks内核启动之前配置好的，这种方法的困难在于VxWorks内核并没有在扫描过程中系统分配给PCI设备的资源信息，如果此时启用MMU，则在使用PCI设备之前，必须把PCI设备使用的地址动态映射到MMU。
PCI Initialization Sequences 当VxWorks内核起来之后，PCI设备的第一次使用都是必须在调用sysHwInit2()例程之后。但是由于MMU内存映射的初始化和激活是在例程sysHwInit()和sysHwInit2()之间的，所以推荐的PCI初始化顺序为：</description>
    </item>
    
    <item>
      <title>WindRiver WindML 5.3显示图片程序</title>
      <link>https://www.vxworks7.com/post/app/how-to-display-photos-with-windml-5.3.html</link>
      <pubDate>Thu, 22 Dec 2022 10:30:12 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/how-to-display-photos-with-windml-5.3.html</guid>
      <description>&lt;p&gt;WindRiver的
&lt;a href=&#34;https://www.vxworks.net/windml&#34; title=&#34;WindML5.3&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    WindML5.3
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;里默认已经支持JPG和PNG的图片格式了&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>实测VxWorks响应PCIe中断的最小时间间隔</title>
      <link>https://www.vxworks7.com/post/app/mininum-time-for-vxworks-response-pcie-interrupt.html</link>
      <pubDate>Wed, 21 Dec 2022 08:50:10 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/mininum-time-for-vxworks-response-pcie-interrupt.html</guid>
      <description>&lt;p&gt;中断是外部事件通知操作系统的最常用手段。中断处理机制是计算机多任务环境运行的基础，是系统实时性的保证;VxWorks是美国Wind River公司于1983年设计开发的一种嵌入式实时操作系统。内核wind在任务调度、中断处理及网络处理等方面与其它嵌入式实时操作系统相比具有一定的优势。特别是其提供的微秒级的中断处理为VxWorks在嵌入式实时操作系统领域的旗舰地位奠定了基础。本文通过带有PCIe接口的FPGA开发板，在VxWorks6.8版本的操作系统环境下，实测一下VxWorks操作系统中断处理的最小时间间隔是否是传说中的微秒级。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>航空电子设备与智能边缘</title>
      <link>https://www.vxworks7.com/post/news/avionics-and-intelligent-edge.html</link>
      <pubDate>Wed, 21 Dec 2022 08:34:59 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/news/avionics-and-intelligent-edge.html</guid>
      <description>&lt;p&gt;在最近的AFCEA Lexington-Concord New Horizons会议上，美国空军首席信息Lauren Knausenberger强调，美国空军的下一代机载平台需要采用特斯拉那样的方式，结合感知、自动自主操作和边缘云。她明确表示：“这是一个持续工作的网络。”那么，在航空航天和国防行业，我们应该如何实现航空电子系统数字化转型，使它像云原生的智能边缘平台一样运行呢？未来的理想状况将会是怎样的呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在VxWorks 7下集成Python</title>
      <link>https://www.vxworks7.com/post/app/how-to-integrate-python-into-vxworks-7.html</link>
      <pubDate>Tue, 20 Dec 2022 23:54:53 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/how-to-integrate-python-into-vxworks-7.html</guid>
      <description>&lt;p&gt;VxWorks是由Wind River提供的实时操作系统，而Python是由Python Software Foundation管理的开源解释型编程语言和运行时解释器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks配置多网口</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-config-multi-network-adapter.html</link>
      <pubDate>Tue, 20 Dec 2022 09:12:25 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-config-multi-network-adapter.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文提供在系统运行中对网口进行配置的方法。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>VxWorks固件分析</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-firmware-analysis.html</link>
      <pubDate>Tue, 20 Dec 2022 08:45:34 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-firmware-analysis.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;VxWorks 操作系统是美国WindRiver公司于1983年设计开发的一种嵌入式实时操作系统（RTOS），是嵌入式开发环境的关键组成部分。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>VxWorks系统中vxbus机制总结</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-vxbus-mechanism.html</link>
      <pubDate>Mon, 19 Dec 2022 09:33:53 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-vxbus-mechanism.html</guid>
      <description>&lt;p&gt;先介绍一下
&lt;a href=&#34;https://www.vxworks.net&#34; title=&#34;VxWorks&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;的设备以及驱动的表示方法，以及总的关系：设备和驱动根本都抽象成一个结构体，设备结构体中包含了设备名字、ID号、功能函数指针等必备的信息，驱动结构体包含了初始化函数、名字、ID等信息。总的如图看一下重要的几个结构体的关系：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks内核解读-1</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-wind-kernel-analysis-1.html</link>
      <pubDate>Sun, 18 Dec 2022 08:23:25 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-wind-kernel-analysis-1.html</guid>
      <description>&lt;p&gt;本文首先从实时内核的定义出发，对实时操作系统进行了介绍，并对实时操作系统的特点进行了说明，接着从内核的功能和结构角度介绍了整体式内核，层次式内核，以及微内核。最后对具有微内核特性的VxWorks Wind内核进行了介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks的环形缓冲区设计</title>
      <link>https://www.vxworks7.com/post/bsp/ring-buffer-design-in-vxworks.html</link>
      <pubDate>Sat, 17 Dec 2022 22:47:20 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/ring-buffer-design-in-vxworks.html</guid>
      <description>&lt;p&gt;VxWorks环形缓冲模块主要定义在rngLib.c和rngLib.h中，对于数据结构比较了解的小伙伴应该知道，环形缓冲实际就是一个双向循环队列。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks 6.8下基于QT的串口编程</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-6.8-qt-uart-programming.html</link>
      <pubDate>Fri, 07 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-6.8-qt-uart-programming.html</guid>
      <description>&lt;p&gt;文章简要记录了&lt;code&gt;VxWorks 6.8&lt;/code&gt;下基于&lt;code&gt;Qt&lt;/code&gt;实现的&lt;code&gt;串口&lt;/code&gt;编程。&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;串口&lt;/code&gt;，请参阅 
&lt;a href=&#34;https://vxworks.net/app/22-serial-programming-for-vxworks&#34; title=&#34;VxWorks下的串口测试程序设计和源码&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks下的串口测试程序设计和源码
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks操作系统下的串口读写程序</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-uart-read-write-programming.html</link>
      <pubDate>Thu, 06 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-uart-read-write-programming.html</guid>
      <description>&lt;p&gt;关于传统的串口编程，在各大操作系统下的流程基本是一致的，只是针对不同的操作系统，函数接口可能有所差异而已，下面讲述VxWorks操作系统下对于串口读写的编程步骤和代码&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;串口&lt;/code&gt;，请参阅 
&lt;a href=&#34;https://vxworks.net/app/22-serial-programming-for-vxworks&#34; title=&#34;VxWorks下的串口测试程序设计和源码&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks下的串口测试程序设计和源码
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>针对VxWorks的QT 5.15.10发布了</title>
      <link>https://www.vxworks7.com/post/vxworks/qt-5-15-10-for-vxworks-released.html</link>
      <pubDate>Thu, 06 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/qt-5-15-10-for-vxworks-released.html</guid>
      <description>&lt;p&gt;Qt是一个多平台的C++图形用户界面应用程序框架。它提供给应用程序开发者建立艺术级的图形用户界面所需的所用功能。Qt是完全面向对象的编程，所以具有易扩展和组件编程的优势。&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;QT&lt;/code&gt;的文章，请参阅 
&lt;a href=&#34;https://www.vxworks.net/windml/10-qt-installation-and-execution-under-vxworks-6-8&#34; title=&#34;VxWorks 6.8操作系统下QT的安装设置和运行方法&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks 6.8操作系统下QT的安装设置和运行方法
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks实时性能探究</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-real-time-feature-explore.html</link>
      <pubDate>Thu, 02 Jun 2022 11:52:03 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-real-time-feature-explore.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;VxWorks&lt;/code&gt;操作系统是一款硬实时操作系统，一直听闻其实时性能非常优秀，但是一直没有一个直观地概念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔者最近在使用
&lt;a href=&#34;https://www.vxworks.net/&#34; title=&#34;VxWorks&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;, 由大名鼎鼎的风河（WindRiver）开发。本篇文章就是将VxWorks操作系统和市面上几种其他实时操作系统的实时性能进行对比。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
