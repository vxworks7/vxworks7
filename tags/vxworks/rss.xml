<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VxWorks on VxWorks 7</title>
    <link>https://www.vxworks7.com/tags/vxworks/</link>
    <description>Recent content in VxWorks on VxWorks 7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 28 Dec 2022 10:48:17 -0500</lastBuildDate><atom:link href="https://www.vxworks7.com/tags/vxworks/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>欢迎加入 VxWorks 俱乐部！</title>
      <link>https://www.vxworks7.com/post/welcome-to-vxworks-club/</link>
      <pubDate>Mon, 02 May 2022 15:59:41 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/welcome-to-vxworks-club/</guid>
      <description>欢迎来到 北南南北 文档站点！ 相关文章来源于 VxWorks 俱乐部  ，也可能发布于 AI 嵌入式开发  ，专注于技术分享和交流。
免责声明 所有资源均来自网络，版权归原作者，如有侵权，请联系删除！
欢迎投稿  欢迎广大网友投稿 欢迎加入网友微信群  </description>
    </item>
    
    <item>
      <title>VxWorks下多任务调试</title>
      <link>https://www.vxworks7.com/post/app/vxworks-multiple-tasks-debug.html</link>
      <pubDate>Wed, 28 Dec 2022 10:48:17 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/vxworks-multiple-tasks-debug.html</guid>
      <description>在任务运行过程中,会出现一些异常的情况,导致任务不能正常运行或者对操作系统造成影响。
VxWorks任务编程中常见异常分析 在任务运行过程中,会出现一些异常的情况,导致任务不能正常运行或者对操作系统造成影响。一般来说,这些异常是由程序的逻辑错误造成的,防止这些异常情况的出现和出现后进行补救就有格外重要的意义。
代码重入与共享 在应用中,可能会出现多个任务调用同一段代码的情况,由于任务占用CPU是串行的,不会出现代码资源使用冲突。但是,不同优先级的任务同时调用同一段代码,则可能出现低优先级任务执行某一函数时被执行该函数的高优先级任务打断的情况,如果函数中要改写全局变量而没有使用互斥,就有可能导致错误的存取。例如在中断中调用内存分配或者释放函数,如果某个任务正在调用内存分配函数或者是内存释放函数,打断该任务时会造成异常,可能导致内存泄漏,甚至有可能会因在中断中异常而reboot。另外,如果多个任务共用的代码中有全局变量且使用目的不同,或者多个任务的代码中有全局变量同名的情况,则有可能造成变量使用中的错误。VxWorks提供了任务变量（taskVar）的方法来解决这个问题,任务可以将使用的全局变量作为任务变量独立使用,添加的任务变量保存在任务的上下文中,任务切换时保存当前内容。
符号表的使用 VxWorks中有模块（module）的概念。装载模块完成目标代码文件在内存中的链接,并可以将目标代码文件中的函数与全局变量加入符号表。符号表中的符号对C语言编写的函数以原来名字命名,对于C++语言的函数则是在后面加上形参的数据类型作为符号名。如f1( )的符号名为f1__Fv,最后的v表示void类型;f2(int)符号名为f2__Fi,f3(int,int)为f3__Fii,依此类推。代码的编译过程中并不对要使用的函数和变量进行检查。例如调用一个并不存在的函数编译并不报错,编译器认为此函数可能在操作系统内核中或者已经下载的目标文件中,但在目标文件下载时会找不到要调用的函数。如果符号表中的符号出现了重名,譬如两次下载的目标文件中有函数重名,则要作散列处理,之后对该函数的调用是最后加入符号表的函数,而之前已经装载的模块则不会受到影响。如果应用程序中使用了与操作系统内核同名的符号,则对操作系统某些API函数的调用将会失败。
特殊的任务保护 在VxWorks中,当一个任务被删除,其它任务不会得到通知,而且由于任务间的独立性,每一个任务可以无限制地删除其它任务。在应用中,我们可能会把需要保护任务误删除。VxWorks提供的两个函数taskSafe()和taskUnsafe()将通知意外删除任务而引起的问题。当任务调用taskSafe()时,从调用的那一刻起,该任务就被保护起来而不会被其它任务删除。如果任务1试图删除已经调用taskSafe()的任务2,则任务1将被阻塞,直到任务2调用taskUnsafe()。保护只能由任务自己实现,一个任务不能safe或unsafe另外一个任务。taskSafe()和taskUnsafe()支持嵌套模式。如果有嵌套发生,一个计数器将开始工作,每有一个taskSafe()被调用,则计数器加1;调用1个taskUnsafe(),则计数器减1。只有当计数器为0时,才能删除该任务。
有时为了执行效率等原因,任务的运行需要禁止基于优先级的抢占,这可以通过调用taskLock()实现。如果任务1调用taskLock()禁止了高优先级任务对它的抢占,当任务1被阻塞或被暂停,核心将调度下一个具有最高优先级的就绪任务运行。如果这时任务1又就绪且被调度运行,抢占又被禁止。但是,禁止基于优先级的抢占可以阻止任务切换,却并不会屏蔽中断。调用taskUnLock()可以解除优先级抢占的禁止,通过调用taskLock()和taskUnLock()可以实现对临界资源的互斥访问。
任务调度中CPU的占用 如前所述,不同优先级的任务是通过抢占获得CPU使用权的,如果不选时间片轮转,相同优先级的任务之间也是抢占CPU的。任务就绪队列中正在运行的任务如果不主动放弃CPU,则其它同优先级的任务不会得到运行,这样就有可能看到几个同优先级的任务状态同为READY,但实际上只有一个任务在运行的现象。比如在一个任务中用taskSpawn()函数创建一个同优先级或低优先级的任务,如果原任务一直占用CPU,新任务就不会开始运行。调用函数taskDelay()可以使任务放弃CPU一定的时间,从而实现任务间时间上的同步;也可以放弃CPU零时间,将任务移至同优先级就绪队列的末尾,这样就可以实现多个同优先级的任务并发运行。另外,由于中断能够打断任务的运行,中断处理函数中执行的代码就要尽可能少地占用CPU,并且中断中不能有获取信号量的操作。一旦处于等待之中,所有的任务均得不到运行,用户可能会有CPU不响应的错觉。
堆栈越界 如前所述,每一个任务都有自己的堆栈,任务创建时进行初始化。每个堆栈的大小是固定,但是任务运行过程中并不对堆栈的使用进行限制。由于VxWorks不对内存访问作限制,栈顶超越了原定的值后出现越界,这样操作系统中该任务堆栈以外的内存区域就可能被改写,会造成难以预料的结果,甚至可能造成任务的上下文区域被改写而任务消失。造成越界的原因主要是在函数中定义了比较大的数组,以致进栈时越界。这样在编写程序时,就要求在堆栈许可的范围内定义数组。如果确实需要比较大的内存空间,可以使用操作系统的内存分配函数来获得内存。由于堆栈越界后有可能使任务的控制信息被破坏,使得对堆栈越界的检测比较困难,例如可以在栈底写入一串特殊字符,用另外一个任务或者中断服务程序经常来检查是否被改写来判断越界。
CPU异常 在VxWorks中,当任务的指令执行中出现了指令非法、地址寻址错误、总线错、除数为0等情况时,就会出现CPU异常。比较常见的情况是,指针地址非法或者数组下标越界就有可能存取有效地址空间以外的地址而造成CPU异常。VxWorks提供一个异常处理句柄（handler）和一个名为tExcTask的任务来处理异常。异常出现后任务成为挂起状态（suspend）,并且不能转变为其它状态。在VxWorks中,有一个异常向量表来对应各种异常,外部中断也作为一种特殊的异常。VxWorks的做法是把多种异常的处理映射到同一个异常处理函数进行处理,并且VxWorks提供了向这个异常处理函数中钩挂用户的异常处理函数的接口excHookAdd(),也可以将某一个异常向量映射到指定的处理函数。
任务调试模式下的多任务调试 在任务调试模式下，在一个集成环境中，在一个任务中调试，在另一个任务中设置断点，设置的断点不起作用。这是因为一个调试器只能处理一个TCB（任务控制块），每个任务都有一个TCB，因此一个调试器只能调试一个任务，要调试几个任务就要启动几个调试器。一个集成环境只能启动一个调试器，所以要调试几个任务就要启动几个集成环境。另外，需要在被调试的任务的待调试的第一条语句前加入taskSuspend(0)语句，挂起该任务，否则任务就可能会在调试前被执行。 下面是多任务调试的测试用例的源代码
/* VxWorks includes */ #include &amp;#34;vxWorks.h&amp;#34; #include &amp;#34;taskLib.h&amp;#34; #include &amp;#34;stdio.h&amp;#34; #include &amp;#34;msgQLib.h&amp;#34; int g_lTaskATid; int g_lTaskBTid; MSG_Q_ID g_MsgQ1id; MSG_Q_ID g_MsgQ2id; void MultiTaskTestTaskA(void) { char cMsgToTaskB[100]; char cMsgFromTaskB[100]; sprintf(cMsgToTaskB,&amp;#34;To TaskB \n&amp;#34;); printf(&amp;#34; Hello from MultiTaskTestTaskA \n&amp;#34;); /*start point of debugging for MultiTaskTestTaskA*/ taskSuspend(0); for(;;) { printf(&amp;#34; Hello from MultiTaskTestTaskA \n&amp;#34;); /*Send message to MultiTaskTestTaskB*/ msgQSend(g_MsgQ1id,cMsgToTaskB,sizeof(cMsgToTaskB),WAIT_FOREVER,MSG_PRI_NORMAL); /*Receive message from MultiTaskTestTaskB*/ msgQReceive(g_MsgQ2id,cMsgFromTaskB,100,WAIT_FOREVER); printf(&amp;#34;%s&amp;#34;,cMsgFromTaskB); } } void MultiTaskTestTaskB(void) { char cMsgToTaskA[100]; char cMsgFromTaskA[100]; sprintf(cMsgToTaskA,&amp;#34;To TaskA \n&amp;#34;); printf(&amp;#34; Hello from MultiTaskTestTaskB \n&amp;#34;); /*start point of debugging for MultiTaskTestTaskA*/ taskSuspend(0); for(;;) { printf(&amp;#34; Hello from MultiTaskTestTaskB \n&amp;#34;); /*Send message to MultiTaskTestTaskA*/ msgQSend(g_MsgQ2id,cMsgToTaskA,sizeof(cMsgToTaskA),WAIT_FOREVER,MSG_PRI_NORMAL); /*Receive message from MultiTaskTestTaskA*/ msgQReceive(g_MsgQ1id,cMsgFromTaskA,100,WAIT_FOREVER); printf(&amp;#34;%s&amp;#34;,cMsgFromTaskA); } } /*This function spawns MultiTaskTestTaskA and MultiTaskTestTaskB , creates g_MsgQ1id and g_MsgQ2id , is entry for debugging.</description>
    </item>
    
    <item>
      <title>VxWorks系统编程方法</title>
      <link>https://www.vxworks7.com/post/app/vxworks-system-programming-method.html</link>
      <pubDate>Mon, 26 Dec 2022 11:22:08 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/vxworks-system-programming-method.html</guid>
      <description>&lt;p&gt;实时系统主要包括：多任务调度（采用优先级抢占方式），任务间的同步和进程间通信机制.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>嵌入式操作系统VxWorks简介</title>
      <link>https://www.vxworks7.com/post/bsp/embedded-os-vxworks-introduction.html</link>
      <pubDate>Mon, 26 Dec 2022 10:23:56 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/embedded-os-vxworks-introduction.html</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://www.vxworks.net&#34; title=&#34;VxWorks&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;操作系统是美国WindRiver公司于1983年设计开发的一种嵌入式实时操作系统（RTOS），是嵌入式开发环境的关键组成部分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxBus设备驱动模型</title>
      <link>https://www.vxworks7.com/post/bsp/vxbus-device-driver-model-in-vxworks.html</link>
      <pubDate>Sun, 25 Dec 2022 00:10:11 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxbus-device-driver-model-in-vxworks.html</guid>
      <description>&lt;p&gt;VxBus是指在VxWorks中用于支持设备驱动的特有的架构，这种架构包含对minimal BSP的支持。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks下Telnet客户端的C语言实现代码</title>
      <link>https://www.vxworks7.com/post/app/c-code-to-implement-telnet-client-in-vxworks.html</link>
      <pubDate>Sat, 24 Dec 2022 11:35:19 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/c-code-to-implement-telnet-client-in-vxworks.html</guid>
      <description>&lt;p&gt;本文主要分享了VxWorks系统下实现telnet client客户端的C语言代码&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PCI总线在VxWorks中的实现</title>
      <link>https://www.vxworks7.com/post/bsp/pci-bus-implementation-in-vxworks.html</link>
      <pubDate>Sat, 24 Dec 2022 04:04:08 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/pci-bus-implementation-in-vxworks.html</guid>
      <description>&lt;p&gt;在最近发布的BSP中，风河公司基本上都提供了对PCI BUS的支持，本文主要探讨PCI BUS在VxWorks系统中的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WindRiver WindML 5.3显示图片程序</title>
      <link>https://www.vxworks7.com/post/app/how-to-display-photos-with-windml-5.3.html</link>
      <pubDate>Thu, 22 Dec 2022 10:30:12 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/how-to-display-photos-with-windml-5.3.html</guid>
      <description>&lt;p&gt;WindRiver的
&lt;a href=&#34;https://www.vxworks.net/windml&#34; title=&#34;WindML5.3&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    WindML5.3
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;里默认已经支持JPG和PNG的图片格式了&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>实测VxWorks响应PCIe中断的最小时间间隔</title>
      <link>https://www.vxworks7.com/post/app/mininum-time-for-vxworks-response-pcie-interrupt.html</link>
      <pubDate>Wed, 21 Dec 2022 08:50:10 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/mininum-time-for-vxworks-response-pcie-interrupt.html</guid>
      <description>&lt;p&gt;中断是外部事件通知操作系统的最常用手段。中断处理机制是计算机多任务环境运行的基础，是系统实时性的保证;VxWorks是美国Wind River公司于1983年设计开发的一种嵌入式实时操作系统。内核wind在任务调度、中断处理及网络处理等方面与其它嵌入式实时操作系统相比具有一定的优势。特别是其提供的微秒级的中断处理为VxWorks在嵌入式实时操作系统领域的旗舰地位奠定了基础。本文通过带有PCIe接口的FPGA开发板，在VxWorks6.8版本的操作系统环境下，实测一下VxWorks操作系统中断处理的最小时间间隔是否是传说中的微秒级。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>航空电子设备与智能边缘</title>
      <link>https://www.vxworks7.com/post/news/avionics-and-intelligent-edge.html</link>
      <pubDate>Wed, 21 Dec 2022 08:34:59 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/news/avionics-and-intelligent-edge.html</guid>
      <description>&lt;p&gt;在最近的AFCEA Lexington-Concord New Horizons会议上，美国空军首席信息Lauren Knausenberger强调，美国空军的下一代机载平台需要采用特斯拉那样的方式，结合感知、自动自主操作和边缘云。她明确表示：“这是一个持续工作的网络。”那么，在航空航天和国防行业，我们应该如何实现航空电子系统数字化转型，使它像云原生的智能边缘平台一样运行呢？未来的理想状况将会是怎样的呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在VxWorks 7下集成Python</title>
      <link>https://www.vxworks7.com/post/app/how-to-integrate-python-into-vxworks-7.html</link>
      <pubDate>Tue, 20 Dec 2022 23:54:53 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/how-to-integrate-python-into-vxworks-7.html</guid>
      <description>&lt;p&gt;VxWorks是由Wind River提供的实时操作系统，而Python是由Python Software Foundation管理的开源解释型编程语言和运行时解释器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks配置多网口</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-config-multi-network-adapter.html</link>
      <pubDate>Tue, 20 Dec 2022 09:12:25 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-config-multi-network-adapter.html</guid>
      <description>&lt;p&gt;本文提供在系统运行中对网口进行配置的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks固件分析</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-firmware-analysis.html</link>
      <pubDate>Tue, 20 Dec 2022 08:45:34 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-firmware-analysis.html</guid>
      <description>&lt;p&gt;VxWorks 操作系统是美国WindRiver公司于1983年设计开发的一种嵌入式实时操作系统（RTOS），是嵌入式开发环境的关键组成部分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks系统中vxbus机制总结</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-vxbus-mechanism.html</link>
      <pubDate>Mon, 19 Dec 2022 09:33:53 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-vxbus-mechanism.html</guid>
      <description>&lt;p&gt;先介绍一下
&lt;a href=&#34;https://www.vxworks.net&#34; title=&#34;VxWorks&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;的设备以及驱动的表示方法，以及总的关系：设备和驱动根本都抽象成一个结构体，设备结构体中包含了设备名字、ID号、功能函数指针等必备的信息，驱动结构体包含了初始化函数、名字、ID等信息。总的如图看一下重要的几个结构体的关系：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks内核解读-1</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-wind-kernel-analysis-1.html</link>
      <pubDate>Sun, 18 Dec 2022 08:23:25 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-wind-kernel-analysis-1.html</guid>
      <description>&lt;p&gt;本文首先从实时内核的定义出发，对实时操作系统进行了介绍，并对实时操作系统的特点进行了说明，接着从内核的功能和结构角度介绍了整体式内核，层次式内核，以及微内核。最后对具有微内核特性的VxWorks Wind内核进行了介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks的环形缓冲区设计</title>
      <link>https://www.vxworks7.com/post/bsp/ring-buffer-design-in-vxworks.html</link>
      <pubDate>Sat, 17 Dec 2022 22:47:20 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/ring-buffer-design-in-vxworks.html</guid>
      <description>&lt;p&gt;VxWorks环形缓冲模块主要定义在rngLib.c和rngLib.h中，对于数据结构比较了解的小伙伴应该知道，环形缓冲实际就是一个双向循环队列。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks 6.8下基于QT的串口编程</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-6.8-qt-uart-programming.html</link>
      <pubDate>Fri, 07 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-6.8-qt-uart-programming.html</guid>
      <description>&lt;p&gt;文章简要记录了&lt;code&gt;VxWorks 6.8&lt;/code&gt;下基于&lt;code&gt;Qt&lt;/code&gt;实现的&lt;code&gt;串口&lt;/code&gt;编程。&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;串口&lt;/code&gt;，请参阅 
&lt;a href=&#34;https://vxworks.net/app/22-serial-programming-for-vxworks&#34; title=&#34;VxWorks下的串口测试程序设计和源码&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks下的串口测试程序设计和源码
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks操作系统下的串口读写程序</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-uart-read-write-programming.html</link>
      <pubDate>Thu, 06 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-uart-read-write-programming.html</guid>
      <description>&lt;p&gt;关于传统的串口编程，在各大操作系统下的流程基本是一致的，只是针对不同的操作系统，函数接口可能有所差异而已，下面讲述VxWorks操作系统下对于串口读写的编程步骤和代码&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;串口&lt;/code&gt;，请参阅 
&lt;a href=&#34;https://vxworks.net/app/22-serial-programming-for-vxworks&#34; title=&#34;VxWorks下的串口测试程序设计和源码&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks下的串口测试程序设计和源码
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>针对VxWorks的QT 5.15.10发布了</title>
      <link>https://www.vxworks7.com/post/vxworks/qt-5-15-10-for-vxworks-released.html</link>
      <pubDate>Thu, 06 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/qt-5-15-10-for-vxworks-released.html</guid>
      <description>&lt;p&gt;Qt是一个多平台的C++图形用户界面应用程序框架。它提供给应用程序开发者建立艺术级的图形用户界面所需的所用功能。Qt是完全面向对象的编程，所以具有易扩展和组件编程的优势。&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;QT&lt;/code&gt;的文章，请参阅 
&lt;a href=&#34;https://www.vxworks.net/windml/10-qt-installation-and-execution-under-vxworks-6-8&#34; title=&#34;VxWorks 6.8操作系统下QT的安装设置和运行方法&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks 6.8操作系统下QT的安装设置和运行方法
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks实时性能探究</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-real-time-feature-explore.html</link>
      <pubDate>Thu, 02 Jun 2022 11:52:03 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-real-time-feature-explore.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;VxWorks&lt;/code&gt;操作系统是一款硬实时操作系统，一直听闻其实时性能非常优秀，但是一直没有一个直观地概念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔者最近在使用
&lt;a href=&#34;https://www.vxworks.net/&#34; title=&#34;VxWorks&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;, 由大名鼎鼎的风河（WindRiver）开发。本篇文章就是将VxWorks操作系统和市面上几种其他实时操作系统的实时性能进行对比。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
