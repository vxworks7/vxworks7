<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VxWorks on VxWorks 7</title>
    <link>https://www.vxworks7.com/tags/vxworks/</link>
    <description>Recent content in VxWorks on VxWorks 7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 03 Jan 2023 08:27:58 -0500</lastBuildDate><atom:link href="https://www.vxworks7.com/tags/vxworks/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>欢迎加入 VxWorks 俱乐部！</title>
      <link>https://www.vxworks7.com/post/welcome-to-vxworks-club/</link>
      <pubDate>Mon, 02 May 2022 15:59:41 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/welcome-to-vxworks-club/</guid>
      <description>欢迎来到 北南南北 文档站点！ 相关文章来源于 VxWorks 俱乐部  ，也可能发布于 AI 嵌入式开发  ，专注于技术分享和交流。
免责声明 所有资源均来自网络，版权归原作者，如有侵权，请联系删除！
欢迎投稿  欢迎广大网友投稿 欢迎加入网友微信群  </description>
    </item>
    
    <item>
      <title>VxWorks开发环境Workbench与Tornado介绍</title>
      <link>https://www.vxworks7.com/post/bsp/introduction-of-workbench-and-tornado-for-vxworks.html</link>
      <pubDate>Tue, 03 Jan 2023 08:27:58 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/introduction-of-workbench-and-tornado-for-vxworks.html</guid>
      <description>嵌入式系统开发所面临的问题 嵌入式软件开发有别于桌面软件系统开发的一个显著的特点是它一般需要一个交叉编译和调试环境，即编辑和编译软件在主机上进行（如在PC机的Windows操作系统下），编译好的软件需要下载到目标机上运行（如在一个PPC的目标机上的VxWorks操作系统下），主机和目标机建立起通讯连接，并传输调试命令和数据。由于主机和目标机往往运行着不同的操作系统，而且处理器的体系结构也彼此不同，这就提高了嵌入式开发的复杂性。
总的来说，嵌入式开发所面临的问题主要表现在以下几个方面：
涉及多种CPU及多种OS 嵌入式的CPU或处理器可谓多种多样，这包括了PENTIUM、MIPS、PPC、ARM，XSCALE等，而且应用都很广，在其上运行的操作系统也有不少，如VxWorks, Linux, Nuclears,WinCE等等，即使在一个公司之内，也会同时使用好几种处理器，甚至几种嵌入式操作系统。如果需要同时调试多种类型的板子，每个扳子上又运行着多个任务或进程，那复杂性是可想而知的。
开发工具种类繁多 不仅各种操作系统有各自的开发工具，在同一系统下开发的不同阶段也有不同的开发工具。如在用户的目标板开发初期，需要硬件仿真器来调试硬件系统和基本的驱动程序，在调试应用程序阶段可以使用交互式的开发环境进行软件调试，在测试阶段需要一些专门的测试工具软件进行功能和性能的测试，在生产阶段需要固化程序及出厂检测等等。一般每一种工具都要从不同的供应商处购买，都要单独去学习和掌握，这无疑增加了整个公司的支出和管理的难度。
对目标系统的观察和控制 由于嵌入式硬件系统千差万别，软件模块和系统资源也多种多样，要使系统能正常工作，软件开发者必须要对目标系统具有完全的观察和控制能力，例如硬件的各种寄存器、内存空间，操作系统的信号量、消息队列、任务、堆栈等。
此外，嵌入式系统变化更新比较快，对开发时间要求比较紧，尤其是消费类产品更是如此，如果有一套功能强大的嵌入式软件集成开发工具可以满足嵌入式软件开发各个阶段的需求，同时又使用方便，界面友好，那是最理想不过了。美国风河系统公司（以下简称为“风河公司”）新近推出的“Workbench”嵌入式软件开发平台正是这样一个“全能选手”。
Workbench嵌入式开发平台的特点和优势 风河公司一直致力于嵌入式软件领域的研究，其历史悠久的Tornado开发环境和VxWorks嵌入式操作系统产品在嵌入式领域中应用非常广泛，尤以其业界领先的强实时性和稳定性而著称于世。风河公司的新一代Workbench开发平台继承了其原有的Tornado集成开发平台的一贯优势，并且功能更加强大，由于新采用了先进的Eclipse软件框架结构，从而使整个系统更加开放和易于扩展。它的主要优势表现在：
以开放的Eclipse平台为框架，调试环境可充分进行客户化定制 Eclipse软件框架结构是一个完整和开放的基础平台，它能够将图形工具以及任何必须的功能通过标准的接口集成到同一个开发环境中。目前IBM，HP及Borland等商业开发工具提供商均支持Eclipse开发平台，网上也存在着大量的为Eclipse平台开发插件的社区。由于Workbench符合Eclipse框架，所以这些商用的和免费的符合Eclipse平台接口的插件均可以集成到Workbench开发环境中，这极大扩展了Workbench的功能。例如，如果用户想使用自己熟悉的配置管理工具或者编辑器，就可以找到这样一个插件并集成进来，这样用户就会感到开发过程非常适合自己的需要。
不仅如此，风河公司还对Eclipse做了多方面的增强，从而显著提高了系统的性能。例如Workbench实现了异步接口功能，需要长时间运行的任务可以在后台运行，与此同时还能继续接收开发人员的调试请求，这样不至于使开发人员做长时间的等待；另外，Workbench还优化了对目标机数据的请求机制，即系统只检索在集成开发环境的当前视图中所需要的少量数据，看不见的数据则不向目标机索取，这样就大大提高了交叉调试时系统的响应速度并减少了系统负荷。
单一的全功能平台，涉及到产品的整个开发周期 一个嵌入式产品的软件开发，其“实质性”的过程包括了从开始的硬件启动，BSP（板级支持包）及驱动的开发，到应用程序的开发，再到后来的测试、验证，直至最后的生产阶段。一般来说，每个阶段都可以找到不同的工具来使用（实际情况也大都如此）。而风河公司的Workbench开发平台改变了这一现状，它以一个单一的Workbench平台，提供了上述开发阶段所需要的几乎所有功能。具体来说，这包括了硬件系统仿真功能（有配套的硬件仿真器），工程管理和构建系统，编辑器，版本管理，命令解释器，调试工具，系统分析工具，系统观察工具，FLASH编程工具等等，再加上风河公司自己开发的和第三方厂家提供的各种软件功能模块和开发工具的插件，所有这一切，都集成在Workbench这个统一的平台之下，这必将大大改善嵌入式软件的开发环境。对一个企业来讲，更可以提高效率，减少投资，简化管理。嵌入式软件开发的各个阶段以及Workbench在各个阶段提供的功能如图2所示。
广泛的适用性，特别适合复杂的目标系统 Workbench平台的广泛适用性主要体现在七“多”上，即多任务、多目标、多模式、多OS、多CPU、多连接形式、多主机环境。
  多任务：在Workbench调试环境下，可以同时连接目标系统上的多个不同的任务（或者进程），每个任务都可以单独设置断点，进行单步调试。开发者再也不用象以前那样，为了调试多个任务，先断开一个任务的连接，再连接到另外一个任务上去。这就给具有多任务的目标系统开发提供了便利，尤其是需要查看多个任务之间的配合关系时体现的优势更加明显；
  多CPU：我们知道，风河公司的Tornado开发环境可以说已经支持了全系列的主流CPU（或处理器），而Workbench也将继承这个传统，目前推出的Workbench 2.2版本已经可以支持PENTIUM、PPC、MIPS系列的所有主流CPU。对ARM、XSCALE、SH等系列的支持正在移植和测试中，不久即将发布正式版本（Workbench 2.3）。
  多OS：目前的Workbench 2.2不仅支持VxWorks嵌入式操作系统（6.0以上版本），而且支持Linux操作系统，这确实给广大的Linux嵌入式开发人员带来了福音。大家知道，由于Linux操作系统的“免费”性质，使得其上的软件开发系统一直比较分散和孤立，用起来不是特别方便，有了Workbench以后，嵌入式Linux的开发就同VxWorks的开发一样方便和快捷了。并且以后，如果有必要的话，还可以增加对其它类型嵌入式操作系统的支持，因为Workbench本身是开放和可扩展的。
  多目标：Workbench对复杂目标系统的强有力的支持还表现在它可以支持同时连接多块目标板进行调试开发，更为可贵的是这些目标板上处理器可以各不相同，并且在目标板上运行的操作系统也可任意（既可以运行VxWorks，也可以运行Linux），而调试工作都可以在同一个Workbench界面中同时进行，这无疑给一些复杂系统的调试带来了极大的便利。
  多连接：所谓多连接，是指Workbench所在的主机和目标机之间可以有多种连接方式进行通讯，如果目标系统中存在以太网接口，那就应该首选以太网连接，因为这种方式速度比较快；如果目标系统中不存在以太网接口，那也可以选用串行口进行通讯连接，除了速度较慢以外，功能上与以太网连接没有什么区别。另外，在目标板初始调试阶段，还可通过风河的硬件仿真器（WindRiver ICE / WindRiver Probe）进行连接，观察硬件状态，以迅速定位硬件问题。
  多模式：在Workbench中调试程序，即可以采用任务模式，也可以采用系统模式。所谓任务模式，是指各个任务之间独立运行，暂停其中一个任务的运行不影响其他任务的运行（主要用于调试各个任务）；而系统模式则是指只要暂停了系统的任何一处，整个系统都停止下来（主要用于调试中断程序）。
  多主机：这是指Workbench可以在Windows、Linux、Solaris这三大流行的主机操作系统下运行，这不仅可以适合不同开发者的使用习惯，而且在一定程度上有利于某些目标系统的开发，如使用Linux主机环境调试运行Linux系统的目标板（但这并不是必须的）。
  丰富易用的调试手段，大大加快调试进度   动态链接：用过Tornado开发环境的人都对其独特的分模块单独下载、动态链接到目标系统的功能深有体会，而Workbench也完全继承了这个特性。有了这个功能，就使开发者不必将所有应用模块都编写完成再进行调试，也不用每次将应用模块和操作系统编译到一起然后下载调试，而是编好一个小模块，如果想进行验证，只需将这个小模块（哪怕只是一个函数）编译然后下载到目标板中就行了，这大大加快了调试验证的速度，尤其是在目标板和主机之间是低速连接的情况下更能体现出其优势所在。
  目标可视：对目标系统的可视化是每一个嵌入式软件开发人员都希望得到的功能，为达到这一目的，Workbench除了提供一般的查看内存，积存器、变量、调用树等的传统视图工具外，还提供了几种增强的系统查看工具：目标浏览器、系统观察器和SCOPETOOLS工具集。目标浏览器可以用来查看目标系统每一个系统资源的使用情况和当前状态，包括系统各个模块、任务、信号量、消息队列、内存、堆栈等。系统观察器可对系统事件提供详细的分析和图形化的可视效果，同时还可展示在目标机上执行的应用程序的相关任务、中断以及系统对象之间复杂的交互作用。它能够清楚地显示上下文变化以及信号量、消息队列、信号、任务、用户事件和记时器一类的系统事件，就象一个软件的“示波器”。应用这些系统查看工具，开发人员可以很容易地去诊断和解决嵌入式系统中存在的调度问题（如死锁，饥饿和竞争），性能问题（如优先级设置，资源的竞争与互斥），定时问题等。而RTI SCOPETOOLS则是专门为设备类软件开发提供的一组强大的可视化工具集，用户可以动态观察整个系统平台，包括应用代码、第三方的库，甚至操作系统本身。Workbench 2.2中集成进来了用于观察函数执行效率的ProfileScope工具，用于观察内存使用效率和检测内存泄露的MemScope工具，和用于检测变量或指定内存位置处数值的动态变化情况的StethoScope工具。另外，还有可选的用于实时跟踪代码执行情况的TraceScope工具和用于检测代码执行覆盖率的CoverageScope工具。
  仿真环境：在目标系统的硬件开发完成之前，往往软件系统的开发也要同步进行，Workbench提供的模拟仿真环境（只适用于针对VxWorks操作系统的应用软件开发）就提供了这种同步开发的途径。VxWorks软件仿真器运行于主机操作系统环境中，是一种从VxWorks6.0操作系统移植过来的本地应用程序，它能够精确地实施VxWorks 6.0的高级复杂特性，包括实时进程、内存保护等，它还具有完整的文件系统和网络功能，并能调用主机系统API。这些特性使得在VxWorks软件仿真器中开发复杂的系统成为可能。例如，在VxWorks软件仿真器中可以组建多个网络，这些网络不但互相之间可以通讯，还可以通过主机系统的网口与外界相连，实现一个完全真实的网络环境；再例如，可以利用主机系统的显示屏幕来开发具有图形用户界面的应用程序，这是通过调用主机系统与图形相关的API来实现的。一般来说，用户可以为主机系统的任何资源编写API，而在VxWorks软件仿真环境中进行调用，这极大地扩展了VxWorks软件仿真器的功能，也更便于应用软件的同步开发。
  除了以上所提到的需要特别强调的功能外，Workbench的强大调试功能还表现在支持各种类型的断点设置、方便灵活的操作系统内核配置工具，具有主机Shell和目标机Shell，具有4种命令解释器，以及丰富的视图界面等等，详细情况请参考Workbench的说明及手册，这里就不多做介绍。总之，使用Workbench给开发人员的感受就是方便灵活，功能强大，几乎无所不能。
  Workbench与Tornado的功能对比 Workbench平台相对于Tornado平台来说，各项功能均有所增强，也有不少新加入的功能，主要的功能对比如下表所列：</description>
    </item>
    
    <item>
      <title>VxWorks Workbench开发环境快速介绍</title>
      <link>https://www.vxworks7.com/post/app/a-quick-intro-to-vxworks-workbench-development-environment.html</link>
      <pubDate>Sun, 01 Jan 2023 23:35:44 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/a-quick-intro-to-vxworks-workbench-development-environment.html</guid>
      <description>&lt;p&gt;本文介绍了VxWorks Workbench开发环境相关的快速教程&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks环境搭建与学习</title>
      <link>https://www.vxworks7.com/post/bsp/how-to-setup-vxworks-development-environment.html</link>
      <pubDate>Sat, 31 Dec 2022 09:55:36 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/how-to-setup-vxworks-development-environment.html</guid>
      <description>&lt;p&gt;本文讲述了如何搭建VxWorks开发环境，对于学习VxWorks的网友来说是一篇比较好的入门文档。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks操作系统下的USB摄像头驱动总结</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-device-driver-for-usb-camera.html</link>
      <pubDate>Sat, 31 Dec 2022 01:26:47 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-device-driver-for-usb-camera.html</guid>
      <description>&lt;p&gt;本文分享了VxWorks下USB摄像头驱动总结&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks6.6下基于VxBus的以太网驱动开发</title>
      <link>https://www.vxworks7.com/post/bsp/network-device-driver-design-based-on-vxbus.html</link>
      <pubDate>Thu, 29 Dec 2022 07:32:24 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/network-device-driver-design-based-on-vxbus.html</guid>
      <description>&lt;p&gt;最近更换mpc8313的phy芯片，由原来的lxt972Phy更换为DP83849I，在此记录下本人在驱动开发过程中的点滴记录，以备日后查询。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks下多任务调试</title>
      <link>https://www.vxworks7.com/post/app/vxworks-multiple-tasks-debug.html</link>
      <pubDate>Wed, 28 Dec 2022 10:48:17 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/vxworks-multiple-tasks-debug.html</guid>
      <description>&lt;p&gt;在任务运行过程中,会出现一些异常的情况,导致任务不能正常运行或者对操作系统造成影响。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks系统编程方法</title>
      <link>https://www.vxworks7.com/post/app/vxworks-system-programming-method.html</link>
      <pubDate>Mon, 26 Dec 2022 11:22:08 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/vxworks-system-programming-method.html</guid>
      <description>&lt;p&gt;实时系统主要包括：多任务调度（采用优先级抢占方式），任务间的同步和进程间通信机制.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>嵌入式操作系统VxWorks简介</title>
      <link>https://www.vxworks7.com/post/bsp/embedded-os-vxworks-introduction.html</link>
      <pubDate>Mon, 26 Dec 2022 10:23:56 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/embedded-os-vxworks-introduction.html</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://www.vxworks.net&#34; title=&#34;VxWorks&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;操作系统是美国WindRiver公司于1983年设计开发的一种嵌入式实时操作系统（RTOS），是嵌入式开发环境的关键组成部分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxBus设备驱动模型</title>
      <link>https://www.vxworks7.com/post/bsp/vxbus-device-driver-model-in-vxworks.html</link>
      <pubDate>Sun, 25 Dec 2022 00:10:11 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxbus-device-driver-model-in-vxworks.html</guid>
      <description>&lt;p&gt;VxBus是指在VxWorks中用于支持设备驱动的特有的架构，这种架构包含对minimal BSP的支持。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks下Telnet客户端的C语言实现代码</title>
      <link>https://www.vxworks7.com/post/app/c-code-to-implement-telnet-client-in-vxworks.html</link>
      <pubDate>Sat, 24 Dec 2022 11:35:19 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/c-code-to-implement-telnet-client-in-vxworks.html</guid>
      <description>&lt;p&gt;本文主要分享了VxWorks系统下实现telnet client客户端的C语言代码&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PCI总线在VxWorks中的实现</title>
      <link>https://www.vxworks7.com/post/bsp/pci-bus-implementation-in-vxworks.html</link>
      <pubDate>Sat, 24 Dec 2022 04:04:08 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/pci-bus-implementation-in-vxworks.html</guid>
      <description>&lt;p&gt;在最近发布的BSP中，风河公司基本上都提供了对PCI BUS的支持，本文主要探讨PCI BUS在VxWorks系统中的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WindRiver WindML 5.3显示图片程序</title>
      <link>https://www.vxworks7.com/post/app/how-to-display-photos-with-windml-5.3.html</link>
      <pubDate>Thu, 22 Dec 2022 10:30:12 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/how-to-display-photos-with-windml-5.3.html</guid>
      <description>&lt;p&gt;WindRiver的
&lt;a href=&#34;https://www.vxworks.net/windml&#34; title=&#34;WindML5.3&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    WindML5.3
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;里默认已经支持JPG和PNG的图片格式了&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>实测VxWorks响应PCIe中断的最小时间间隔</title>
      <link>https://www.vxworks7.com/post/app/mininum-time-for-vxworks-response-pcie-interrupt.html</link>
      <pubDate>Wed, 21 Dec 2022 08:50:10 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/mininum-time-for-vxworks-response-pcie-interrupt.html</guid>
      <description>&lt;p&gt;中断是外部事件通知操作系统的最常用手段。中断处理机制是计算机多任务环境运行的基础，是系统实时性的保证;VxWorks是美国Wind River公司于1983年设计开发的一种嵌入式实时操作系统。内核wind在任务调度、中断处理及网络处理等方面与其它嵌入式实时操作系统相比具有一定的优势。特别是其提供的微秒级的中断处理为VxWorks在嵌入式实时操作系统领域的旗舰地位奠定了基础。本文通过带有PCIe接口的FPGA开发板，在VxWorks6.8版本的操作系统环境下，实测一下VxWorks操作系统中断处理的最小时间间隔是否是传说中的微秒级。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>航空电子设备与智能边缘</title>
      <link>https://www.vxworks7.com/post/news/avionics-and-intelligent-edge.html</link>
      <pubDate>Wed, 21 Dec 2022 08:34:59 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/news/avionics-and-intelligent-edge.html</guid>
      <description>&lt;p&gt;在最近的AFCEA Lexington-Concord New Horizons会议上，美国空军首席信息Lauren Knausenberger强调，美国空军的下一代机载平台需要采用特斯拉那样的方式，结合感知、自动自主操作和边缘云。她明确表示：“这是一个持续工作的网络。”那么，在航空航天和国防行业，我们应该如何实现航空电子系统数字化转型，使它像云原生的智能边缘平台一样运行呢？未来的理想状况将会是怎样的呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在VxWorks 7下集成Python</title>
      <link>https://www.vxworks7.com/post/app/how-to-integrate-python-into-vxworks-7.html</link>
      <pubDate>Tue, 20 Dec 2022 23:54:53 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/how-to-integrate-python-into-vxworks-7.html</guid>
      <description>&lt;p&gt;VxWorks是由Wind River提供的实时操作系统，而Python是由Python Software Foundation管理的开源解释型编程语言和运行时解释器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks配置多网口</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-config-multi-network-adapter.html</link>
      <pubDate>Tue, 20 Dec 2022 09:12:25 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-config-multi-network-adapter.html</guid>
      <description>&lt;p&gt;本文提供在系统运行中对网口进行配置的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks固件分析</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-firmware-analysis.html</link>
      <pubDate>Tue, 20 Dec 2022 08:45:34 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-firmware-analysis.html</guid>
      <description>&lt;p&gt;VxWorks 操作系统是美国WindRiver公司于1983年设计开发的一种嵌入式实时操作系统（RTOS），是嵌入式开发环境的关键组成部分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks系统中vxbus机制总结</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-vxbus-mechanism.html</link>
      <pubDate>Mon, 19 Dec 2022 09:33:53 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-vxbus-mechanism.html</guid>
      <description>&lt;p&gt;先介绍一下
&lt;a href=&#34;https://www.vxworks.net&#34; title=&#34;VxWorks&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;的设备以及驱动的表示方法，以及总的关系：设备和驱动根本都抽象成一个结构体，设备结构体中包含了设备名字、ID号、功能函数指针等必备的信息，驱动结构体包含了初始化函数、名字、ID等信息。总的如图看一下重要的几个结构体的关系：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks内核解读-1</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-wind-kernel-analysis-1.html</link>
      <pubDate>Sun, 18 Dec 2022 08:23:25 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-wind-kernel-analysis-1.html</guid>
      <description>&lt;p&gt;本文首先从实时内核的定义出发，对实时操作系统进行了介绍，并对实时操作系统的特点进行了说明，接着从内核的功能和结构角度介绍了整体式内核，层次式内核，以及微内核。最后对具有微内核特性的VxWorks Wind内核进行了介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>开启重返月球之旅</title>
      <link>https://www.vxworks7.com/post/news/our-journey-back-to-the-moon.html</link>
      <pubDate>Sun, 18 Dec 2022 05:21:48 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/news/our-journey-back-to-the-moon.html</guid>
      <description>&lt;p&gt;风河公司祝贺NASA（美国宇航局）成功推进 Artemis I 工程，由此开启了新的返回月球之旅。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks的环形缓冲区设计</title>
      <link>https://www.vxworks7.com/post/bsp/ring-buffer-design-in-vxworks.html</link>
      <pubDate>Sat, 17 Dec 2022 22:47:20 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/ring-buffer-design-in-vxworks.html</guid>
      <description>&lt;p&gt;VxWorks环形缓冲模块主要定义在rngLib.c和rngLib.h中，对于数据结构比较了解的小伙伴应该知道，环形缓冲实际就是一个双向循环队列。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks 6.8下基于QT的串口编程</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-6.8-qt-uart-programming.html</link>
      <pubDate>Fri, 07 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-6.8-qt-uart-programming.html</guid>
      <description>&lt;p&gt;文章简要记录了&lt;code&gt;VxWorks 6.8&lt;/code&gt;下基于&lt;code&gt;Qt&lt;/code&gt;实现的&lt;code&gt;串口&lt;/code&gt;编程。&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;串口&lt;/code&gt;，请参阅 
&lt;a href=&#34;https://vxworks.net/app/22-serial-programming-for-vxworks&#34; title=&#34;VxWorks下的串口测试程序设计和源码&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks下的串口测试程序设计和源码
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks操作系统下的串口读写程序</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-uart-read-write-programming.html</link>
      <pubDate>Thu, 06 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-uart-read-write-programming.html</guid>
      <description>&lt;p&gt;关于传统的串口编程，在各大操作系统下的流程基本是一致的，只是针对不同的操作系统，函数接口可能有所差异而已，下面讲述VxWorks操作系统下对于串口读写的编程步骤和代码&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;串口&lt;/code&gt;，请参阅 
&lt;a href=&#34;https://vxworks.net/app/22-serial-programming-for-vxworks&#34; title=&#34;VxWorks下的串口测试程序设计和源码&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks下的串口测试程序设计和源码
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>针对VxWorks的QT 5.15.10发布了</title>
      <link>https://www.vxworks7.com/post/vxworks/qt-5-15-10-for-vxworks-released.html</link>
      <pubDate>Thu, 06 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/qt-5-15-10-for-vxworks-released.html</guid>
      <description>&lt;p&gt;Qt是一个多平台的C++图形用户界面应用程序框架。它提供给应用程序开发者建立艺术级的图形用户界面所需的所用功能。Qt是完全面向对象的编程，所以具有易扩展和组件编程的优势。&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;QT&lt;/code&gt;的文章，请参阅 
&lt;a href=&#34;https://www.vxworks.net/windml/10-qt-installation-and-execution-under-vxworks-6-8&#34; title=&#34;VxWorks 6.8操作系统下QT的安装设置和运行方法&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks 6.8操作系统下QT的安装设置和运行方法
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks实时性能探究</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-real-time-feature-explore.html</link>
      <pubDate>Thu, 02 Jun 2022 11:52:03 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-real-time-feature-explore.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;VxWorks&lt;/code&gt;操作系统是一款硬实时操作系统，一直听闻其实时性能非常优秀，但是一直没有一个直观地概念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔者最近在使用
&lt;a href=&#34;https://www.vxworks.net/&#34; title=&#34;VxWorks&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;, 由大名鼎鼎的风河（WindRiver）开发。本篇文章就是将VxWorks操作系统和市面上几种其他实时操作系统的实时性能进行对比。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
