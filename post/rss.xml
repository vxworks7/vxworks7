<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on VxWorks 7</title>
    <link>https://www.vxworks7.com/post/</link>
    <description>Recent content in Posts on VxWorks 7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 24 Dec 2022 04:04:08 -0500</lastBuildDate><atom:link href="https://www.vxworks7.com/post/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>欢迎加入 VxWorks 俱乐部！</title>
      <link>https://www.vxworks7.com/post/welcome-to-vxworks-club/</link>
      <pubDate>Mon, 02 May 2022 15:59:41 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/welcome-to-vxworks-club/</guid>
      <description>欢迎来到 北南南北 文档站点！ 相关文章来源于 VxWorks 俱乐部  ，也可能发布于 AI 嵌入式开发  ，专注于技术分享和交流。
免责声明 所有资源均来自网络，版权归原作者，如有侵权，请联系删除！
欢迎投稿  欢迎广大网友投稿 欢迎加入网友微信群  </description>
    </item>
    
    <item>
      <title>PCI总线在VxWorks中的实现</title>
      <link>https://www.vxworks7.com/post/bsp/pci-bus-implementation-in-vxworks.html</link>
      <pubDate>Sat, 24 Dec 2022 04:04:08 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/pci-bus-implementation-in-vxworks.html</guid>
      <description>在最近发布的BSP中，风河公司基本上都提供了对PCI BUS的支持，本文主要探讨PCI BUS在VxWorks系统中的实现。
PCI Address Space and Memory Mapping PCI BUS有三种地址空间：IO Space、Memory Space and Configuration Space。每个PCI设备都通过Configuration Space中的Base Address Registers(BAR)映射到内存或者IO空间，这样就不用像ISA BUS那样，通过硬件Jumpers来设置板卡的Address。PCI BUS的所有配置基本上都是通过Configuration Space的寄存器来控制的。但是，每个PCI Device都必须先配置才能使用，这意味着PCI Device的基地址和中断都必须被系统分配到资源，并且PCI Device能够对正常的PCI配置操作做出回应。
WRS提供一个名为pciConfigLib.c的标准库给用户访问PCI配置空间，该标准库使用PCI规范中定义的访问机制1和机制2来支持Host-Bridge，风河本身提供的第三个访问机制，名为机制0是针对非标准PCI Bridge的，机制0主要是靠调用BSP包中的特定routine来实现PCI配置空间的read/write的，与此同时，这些特定的routine接口和前面的介绍的机制1和机制2是相同的。pciConfigLib.c提供访问PCI配置空间内任何寄存器的routine，该库同样提供一些用于扫描PCI BUS寻找特定PCI 设备实例的方法，另外该库也提供一些简单的配置接口用于配置简单的PCI设备。
PCI Interrupt Handling PCI 规范并没有详细说明PCI中断信号是如何路由到中断控制器的。每个PCI设备都有4个可用的中断PIN，分别命名为A,B,C和D。每个单功能的PCI设备都被要求使用中断PIN A来产生中断，而对于多功能PCI设备，每个功能使用一个中断PIN，但是根据PCI规范，每个PCI设备最多可提供8个功能，这样就必须两个功能共用一个中断PIN。当产生PCI中断时，PCI中断处理系统需要调用多个中断服务程序，那么最简单的方法就是每个ISR都调用一遍，ISR必须有能力判断该次中断源是否是自己产生的，如果不是，则立即返回，并接着会调用下一个中断服务程序。
pciIntLib.c提供一些routine来挂接多个ISR到一个中断LINE上，该库通过挂接一个特殊的ISR，该ISR会遍历一个中断链表，所有共用同一个中断的ISRs都被放在这个链表中。pciIntConnect()用于将设备的ISR挂接到中断链表上，而pciIntDisConnect()用于删除中断链表上的一个ISR。
例子：
pciInitConnect(Vector, ISR1, PARAM1); pciInitConnect(Vector, ISR2, PARAM2); pciInitConnect(Vector, ISR3, PARAM3);   上面3个语句把ISR1，ISR2,和ISR3分别挂接到中断向量为Vector的链表intList里面，那么当中断发生时，会执行下面一个函数：
void sISR(void) { while(intList-&amp;gt;next !=NULL) { (*intList-&amp;gt;INT_ISR)(PARAM);/*分别调用ISR1，ISR2，ISR3，没写很具体，只是个大概理解*/ } } VxWorks中的PCI 配置策略 在BSP中，必须定义宏INCLUDE_PCI来支持PCI BUS，宏PCI_CFG_TYPE必须定义为一下几种类型：
静态配置：PCI_CFG_FORCE 这种方式要求程序员必须手动通过数据表、配置宏或者其他方法来配置每个PCI设备，PCI设备的基地址和使用的中断号必须事先知道。
动态配置：PCI_CFG_AUTO 这种配置方法是最常用的，它通过扫描PCI总线并且给每一个found的设备赋予独立的内存或者IO地址，这也是典型的X86 BIOS的PCI初始化方式。程序员并不需要事先知道分配给PCI设备的系统资源，这个功能主要被实现在pciAutoConfigLib.c模块中。
未配置：PCI_CFG_NONE 这种方法主要是预留给那些不能使用上面的VxWorks配置方法的设备的。此时，所有的PCI设备都是在VxWorks内核启动之前配置好的，这种方法的困难在于VxWorks内核并没有在扫描过程中系统分配给PCI设备的资源信息，如果此时启用MMU，则在使用PCI设备之前，必须把PCI设备使用的地址动态映射到MMU。
PCI Initialization Sequences 当VxWorks内核起来之后，PCI设备的第一次使用都是必须在调用sysHwInit2()例程之后。但是由于MMU内存映射的初始化和激活是在例程sysHwInit()和sysHwInit2()之间的，所以推荐的PCI初始化顺序为：</description>
    </item>
    
    <item>
      <title>T1042/T2080 VxWorks7 开发笔记</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-7-for-t1042-t2080-how-to.html</link>
      <pubDate>Sat, 24 Dec 2022 03:13:31 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-7-for-t1042-t2080-how-to.html</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://www.vxworks.net&#34; title=&#34;VxWorks 7&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks 7
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;是WindRiver推出的新一代版本，相比较VxWorks 6.9特别是驱动部分有很大的改变，VxWorks 7和Linux很像，有设备树的概念，所以从Linux移植驱动到VxWorks 7会方便很多。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IMX6Q 运行 VxWorks 7.0 系统</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-7.0-on-IMX6Q.html</link>
      <pubDate>Fri, 23 Dec 2022 22:24:27 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-7.0-on-IMX6Q.html</guid>
      <description>&lt;p&gt;本文简要概述了如何在IMX6Q上从uboot下载并启动VxWorks 7.0的过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>风河携手Synopsys促安全性提升</title>
      <link>https://www.vxworks7.com/post/news/wind-river-and-synopsys-cowork-to-enhance-security.html</link>
      <pubDate>Fri, 23 Dec 2022 22:16:16 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/news/wind-river-and-synopsys-cowork-to-enhance-security.html</guid>
      <description>&lt;p&gt;随着企业客户对于业务创新速度及敏捷性诉求的不断提升，云化、容器化应用大行其道。Gartner预测，到2023年，70%的企业将在生产中运行三个或更多的容器化应用软件。一个真正意义上的云原生时代已经到来。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks 7.0下基于VxBus的定时器子系统</title>
      <link>https://www.vxworks7.com/post/app/timer-design-based-on-vxbus-in-vxworks-7-0.html</link>
      <pubDate>Fri, 23 Dec 2022 11:24:58 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/timer-design-based-on-vxbus-in-vxworks-7-0.html</guid>
      <description>&lt;p&gt;最近研究了一下VxWorks 7.0下基于vxbus的定时器子系统，方便我们在需要使用定时器中断的时候引用，开发过程中的一点体会记录下来，如果由理解不对或者不全面的望批评指正，谢谢。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WindRiver WindML 5.3显示图片程序</title>
      <link>https://www.vxworks7.com/post/app/how-to-display-photos-with-windml-5.3.html</link>
      <pubDate>Thu, 22 Dec 2022 10:30:12 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/how-to-display-photos-with-windml-5.3.html</guid>
      <description>&lt;p&gt;WindRiver的
&lt;a href=&#34;https://www.vxworks.net/windml&#34; title=&#34;WindML5.3&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    WindML5.3
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;里默认已经支持JPG和PNG的图片格式了&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>U-boot和VxWorks 7的集成</title>
      <link>https://www.vxworks7.com/post/bsp/u-boot-on-vxworks-7.html</link>
      <pubDate>Thu, 22 Dec 2022 10:29:12 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/u-boot-on-vxworks-7.html</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://www.vxworks.net&#34; title=&#34;VxWorks&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;是美国风河公司制作的一个实时操作系统，
&lt;a href=&#34;https://www.vxworks.net/bsp/834-u-boot-and-vxworks-7-integration&#34; title=&#34;U-Boot&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    U-Boot
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;是一个广为人知的通用启动加载器，它是嵌入式系统加电后运行的最早的代码。U-Boot通常被用于嵌入式系统，比如PowerPC或者ARM设备，这些设备上没有X86的BIOS。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用Wind River VxWorks 7实现自动化软件测试</title>
      <link>https://www.vxworks7.com/post/app/wind-river-vxworks-7-automatically-software-test-vectorCAST.html</link>
      <pubDate>Wed, 21 Dec 2022 23:46:58 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/wind-river-vxworks-7-automatically-software-test-vectorCAST.html</guid>
      <description>&lt;p&gt;很多项目都会面临一个问题：怎么才能简单、快速地对实际硬件上的嵌入式应用进行测试 —— 无论是使用模拟器/评估板（处理器在环：PIL）还是生产硬件（硬件在环：HIL）。PIL和HIL测试对于诸如航空航天、汽车电子、医疗、轨道交通等行业内的高安全应用程序来说是尤其重要的，而且这些行业内的应用通常都需要通过资格认证。虽然有些项目并没有那么严格的测试要求，但是如果能尽量在与生产环境相似的环境下进行测试，一定有助于发现更多的问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks 7.0下SD卡驱动流程及文件系统格式化</title>
      <link>https://www.vxworks7.com/post/bsp/SD-card-device-driver-in-vxworks-7.0.html</link>
      <pubDate>Wed, 21 Dec 2022 09:34:04 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/SD-card-device-driver-in-vxworks-7.0.html</guid>
      <description>&lt;p&gt;今天和大家谈谈
&lt;a href=&#34;https://vxworks.net/bsp/935-sd-card-driver-initialization-file-system-format-in-vxworks-7-0&#34; title=&#34;VxWorks 7.0下SD卡&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks 7.0下SD卡
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;的
&lt;a href=&#34;https://www.vxbus.com&#34; title=&#34;vxbus&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    vxbus
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;挂接，及文件系统格式化流程，
&lt;a href=&#34;http://www.vxworks7.com&#34; title=&#34;VxWorks 7&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks 7
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;的vxbus是基于设备树的，首先必须增加设备树节点，如下：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>实测VxWorks响应PCIe中断的最小时间间隔</title>
      <link>https://www.vxworks7.com/post/app/mininum-time-for-vxworks-response-pcie-interrupt.html</link>
      <pubDate>Wed, 21 Dec 2022 08:50:10 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/mininum-time-for-vxworks-response-pcie-interrupt.html</guid>
      <description>&lt;p&gt;中断是外部事件通知操作系统的最常用手段。中断处理机制是计算机多任务环境运行的基础，是系统实时性的保证;VxWorks是美国Wind River公司于1983年设计开发的一种嵌入式实时操作系统。内核wind在任务调度、中断处理及网络处理等方面与其它嵌入式实时操作系统相比具有一定的优势。特别是其提供的微秒级的中断处理为VxWorks在嵌入式实时操作系统领域的旗舰地位奠定了基础。本文通过带有PCIe接口的FPGA开发板，在VxWorks6.8版本的操作系统环境下，实测一下VxWorks操作系统中断处理的最小时间间隔是否是传说中的微秒级。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>航空电子设备与智能边缘</title>
      <link>https://www.vxworks7.com/post/news/avionics-and-intelligent-edge.html</link>
      <pubDate>Wed, 21 Dec 2022 08:34:59 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/news/avionics-and-intelligent-edge.html</guid>
      <description>&lt;p&gt;在最近的AFCEA Lexington-Concord New Horizons会议上，美国空军首席信息Lauren Knausenberger强调，美国空军的下一代机载平台需要采用特斯拉那样的方式，结合感知、自动自主操作和边缘云。她明确表示：“这是一个持续工作的网络。”那么，在航空航天和国防行业，我们应该如何实现航空电子系统数字化转型，使它像云原生的智能边缘平台一样运行呢？未来的理想状况将会是怎样的呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在VxWorks 7下集成Python</title>
      <link>https://www.vxworks7.com/post/app/how-to-integrate-python-into-vxworks-7.html</link>
      <pubDate>Tue, 20 Dec 2022 23:54:53 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/app/how-to-integrate-python-into-vxworks-7.html</guid>
      <description>&lt;p&gt;VxWorks是由Wind River提供的实时操作系统，而Python是由Python Software Foundation管理的开源解释型编程语言和运行时解释器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks配置多网口</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-config-multi-network-adapter.html</link>
      <pubDate>Tue, 20 Dec 2022 09:12:25 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-config-multi-network-adapter.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文提供在系统运行中对网口进行配置的方法。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>VxWorks固件分析</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-firmware-analysis.html</link>
      <pubDate>Tue, 20 Dec 2022 08:45:34 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-firmware-analysis.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;VxWorks 操作系统是美国WindRiver公司于1983年设计开发的一种嵌入式实时操作系统（RTOS），是嵌入式开发环境的关键组成部分。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>风河推VxWorks 7 到底与VxWorks 6.x的区别在哪里</title>
      <link>https://www.vxworks7.com/post/news/difference-between-vxworks-6-and-vxworks7.html</link>
      <pubDate>Mon, 19 Dec 2022 10:47:56 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/news/difference-between-vxworks-6-and-vxworks7.html</guid>
      <description>&lt;p&gt;随着计算机技术的迅速发展和芯片制造工艺的不断进步，嵌入式微处理器的应用日益广泛。从波音飞机到移动终端，都有嵌入式微处理器的存在。在嵌入式微处理器的应用开发中，嵌入式实时操作系统(RTOS)是核心软件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks系统中vxbus机制总结</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-vxbus-mechanism.html</link>
      <pubDate>Mon, 19 Dec 2022 09:33:53 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-vxbus-mechanism.html</guid>
      <description>&lt;p&gt;先介绍一下
&lt;a href=&#34;https://www.vxworks.net&#34; title=&#34;VxWorks&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;的设备以及驱动的表示方法，以及总的关系：设备和驱动根本都抽象成一个结构体，设备结构体中包含了设备名字、ID号、功能函数指针等必备的信息，驱动结构体包含了初始化函数、名字、ID等信息。总的如图看一下重要的几个结构体的关系：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks内核解读-1</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-wind-kernel-analysis-1.html</link>
      <pubDate>Sun, 18 Dec 2022 08:23:25 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-wind-kernel-analysis-1.html</guid>
      <description>&lt;p&gt;本文首先从实时内核的定义出发，对实时操作系统进行了介绍，并对实时操作系统的特点进行了说明，接着从内核的功能和结构角度介绍了整体式内核，层次式内核，以及微内核。最后对具有微内核特性的VxWorks Wind内核进行了介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks的环形缓冲区设计</title>
      <link>https://www.vxworks7.com/post/bsp/ring-buffer-design-in-vxworks.html</link>
      <pubDate>Sat, 17 Dec 2022 22:47:20 -0500</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/ring-buffer-design-in-vxworks.html</guid>
      <description>&lt;p&gt;VxWorks环形缓冲模块主要定义在rngLib.c和rngLib.h中，对于数据结构比较了解的小伙伴应该知道，环形缓冲实际就是一个双向循环队列。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks 7的启动顺序</title>
      <link>https://www.vxworks7.com/post/bsp/vxworks-7-boot-sequence.html</link>
      <pubDate>Tue, 06 Dec 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/bsp/vxworks-7-boot-sequence.html</guid>
      <description>&lt;p&gt;之前遍历过使用WorkBench的VIP编译的VxWorks6.9镜像文件VxWorks，今天以32位SMP模式下的Intel处理器为例，看看VxWorks 7的VxWorks执行顺序。通过对比可以看到，VxWorks 6.9和VxWorks 7的执行顺序基本一致&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux编程之经典多级时间轮定时器</title>
      <link>https://www.vxworks7.com/post/linux/linux-programming-multiple-time-wheel-timer.html</link>
      <pubDate>Fri, 04 Nov 2022 19:52:03 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/linux/linux-programming-multiple-time-wheel-timer.html</guid>
      <description>&lt;p&gt;mmap用于把文件映射到内存空间中，简单说mmap就是把一个文件的内容在内存里面做一个映像。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux mmap内存映射详解</title>
      <link>https://www.vxworks7.com/post/linux/linux-mmap-explanation.html</link>
      <pubDate>Fri, 04 Nov 2022 17:52:03 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/linux/linux-mmap-explanation.html</guid>
      <description>&lt;p&gt;mmap用于把文件映射到内存空间中，简单说mmap就是把一个文件的内容在内存里面做一个映像。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>几道简单的Linux驱动相关面试题</title>
      <link>https://www.vxworks7.com/post/linux/linux-device-driver-questions-and-answers.html</link>
      <pubDate>Fri, 04 Nov 2022 11:52:03 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/linux/linux-device-driver-questions-and-answers.html</guid>
      <description>&lt;p&gt;今天给大家分享几道Linux设备驱动相关的面试题，希望能对需要的网友一些帮助！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>10个Python脚本来自动化你的日常任务</title>
      <link>https://www.vxworks7.com/post/python/ten-python-script-to-automatically-execute-your-daily-task.html</link>
      <pubDate>Sat, 29 Oct 2022 07:53:45 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/python/ten-python-script-to-automatically-execute-your-daily-task.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在这个自动化时代，我们有很多重复无聊的工作要做。 想想这些你不再需要一次又一次地做的无聊的事情，让它自动化，让你的生活更轻松。 那么在本文中，我将向您介绍 10 个 Python 自动化脚本，以使你的工作更加自动化，生活更加轻松。 因此，没有更多的重复任务将这篇文章放在您的列表中，让我们开始吧。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>FPGA硬核和软核处理器的区别</title>
      <link>https://www.vxworks7.com/post/fpga/difference-between-hard-core-processor-and-soft-core-processor-of-fpga.html</link>
      <pubDate>Sat, 29 Oct 2022 06:53:45 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/fpga/difference-between-hard-core-processor-and-soft-core-processor-of-fpga.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;从架构的角度来说，SOPC和SoC FPGA是统一的，都是由FPGA部分和处理器部分组成。在SoC FPGA 中，嵌入的是纯硬件基础的硬核处理器，简称HPS(Hardware Processor System)，而SOPC技术中，嵌入的是使用FPGA逻辑资源实现的软核处理器，两者指令集不一样，处理器性能也不一样。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>详解嵌入式LCD的接口类型</title>
      <link>https://www.vxworks7.com/post/fpga/embedded-lcd-interface-model.html</link>
      <pubDate>Fri, 28 Oct 2022 06:53:45 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/fpga/embedded-lcd-interface-model.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;从架构的角度来说，SOPC和SoC FPGA是统一的，都是由FPGA部分和处理器部分组成。在SoC FPGA 中，嵌入的是纯硬件基础的硬核处理器，简称HPS(Hardware Processor System)，而SOPC技术中，嵌入的是使用FPGA逻辑资源实现的软核处理器，两者指令集不一样，处理器性能也不一样。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>带你走进Linux内核源码中最常见的数据结构之「mutex」</title>
      <link>https://www.vxworks7.com/post/linux/linux-kernel-source-code-data-structure-mutex.html</link>
      <pubDate>Sun, 16 Oct 2022 11:52:03 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/linux/linux-kernel-source-code-data-structure-mutex.html</guid>
      <description>&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;互斥锁（英语：Mutual exclusion，缩写 Mutex）是一种用于多线程编程中，防止两条线程同时对同一公共资源（比如全域变量）进行读写的机制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openssl命令</title>
      <link>https://www.vxworks7.com/post/linux/openssl.html</link>
      <pubDate>Sat, 15 Oct 2022 21:52:03 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/linux/openssl.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;强大的安全套接字层密码库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;OpenSSL&lt;/code&gt;是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。在OpenSSL被曝出现严重安全漏洞后，发现多数通过SSL协议加密的网站使用名为OpenSSL的开源软件包。由于这是互联网应用最广泛的安全传输方法，被网银、在线支付、电商网站、门户网站、电子邮件等重要网站广泛使用，所以该漏洞影响范围广大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>syslog命令</title>
      <link>https://www.vxworks7.com/post/linux/syslog.html</link>
      <pubDate>Sat, 15 Oct 2022 20:52:03 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/linux/syslog.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;系统默认的日志守护进程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;syslog&lt;/code&gt;是Linux系统默认的日志守护进程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在Ubuntu Linux下将mp4转成mp3</title>
      <link>https://www.vxworks7.com/post/linux/how-to-convert-mp4-to-mp3-in-ubuntu-linux.html</link>
      <pubDate>Sat, 15 Oct 2022 11:52:03 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/linux/how-to-convert-mp4-to-mp3-in-ubuntu-linux.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;FFmpeg&lt;/code&gt;是一款开源软件，用于生成处理多媒体数据的各类库和程序。FFmpeg可以转码、处理视频和图片（调整视频、图片大小，去噪等）、打包、传输及播放视频。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文描述了如何在Ubuntu Linux系统下，通过ffmpeg将mp4文件转成mp3文件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>风河携手TCS建构5G/Open RAN分布式移动网络基础设施生态系统</title>
      <link>https://www.vxworks7.com/post/news/windriver-and-TCS-build-5G-Open-Ran-ecos.html</link>
      <pubDate>Thu, 13 Oct 2022 08:53:45 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/news/windriver-and-TCS-build-5G-Open-Ran-ecos.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;全球领先的关键任务智能系统软件提供商风河公司®宣布，正在与塔塔咨询服务公司（TCS）合作，在Wind River Studio上托管vRAN解决方案。这项战略合作将创建一个全栈移动基础设施解决方案，在4G-5G vRAN下一代网络中开展TCS部署和工程服务，并以Studio作为云平台。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>VxWorks 6.8下基于QT的串口编程</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-6.8-qt-uart-programming.html</link>
      <pubDate>Fri, 07 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-6.8-qt-uart-programming.html</guid>
      <description>&lt;p&gt;文章简要记录了&lt;code&gt;VxWorks 6.8&lt;/code&gt;下基于&lt;code&gt;Qt&lt;/code&gt;实现的&lt;code&gt;串口&lt;/code&gt;编程。&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;串口&lt;/code&gt;，请参阅 
&lt;a href=&#34;https://vxworks.net/app/22-serial-programming-for-vxworks&#34; title=&#34;VxWorks下的串口测试程序设计和源码&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks下的串口测试程序设计和源码
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks操作系统下的串口读写程序</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-uart-read-write-programming.html</link>
      <pubDate>Thu, 06 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-uart-read-write-programming.html</guid>
      <description>&lt;p&gt;关于传统的串口编程，在各大操作系统下的流程基本是一致的，只是针对不同的操作系统，函数接口可能有所差异而已，下面讲述VxWorks操作系统下对于串口读写的编程步骤和代码&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;串口&lt;/code&gt;，请参阅 
&lt;a href=&#34;https://vxworks.net/app/22-serial-programming-for-vxworks&#34; title=&#34;VxWorks下的串口测试程序设计和源码&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks下的串口测试程序设计和源码
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>针对VxWorks的QT 5.15.10发布了</title>
      <link>https://www.vxworks7.com/post/vxworks/qt-5-15-10-for-vxworks-released.html</link>
      <pubDate>Thu, 06 Oct 2022 05:35:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/qt-5-15-10-for-vxworks-released.html</guid>
      <description>&lt;p&gt;Qt是一个多平台的C++图形用户界面应用程序框架。它提供给应用程序开发者建立艺术级的图形用户界面所需的所用功能。Qt是完全面向对象的编程，所以具有易扩展和组件编程的优势。&lt;/p&gt;
&lt;p&gt;相关的&lt;code&gt;VxWorks&lt;/code&gt; 和 &lt;code&gt;QT&lt;/code&gt;的文章，请参阅 
&lt;a href=&#34;https://www.vxworks.net/windml/10-qt-installation-and-execution-under-vxworks-6-8&#34; title=&#34;VxWorks 6.8操作系统下QT的安装设置和运行方法&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks 6.8操作系统下QT的安装设置和运行方法
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VxWorks实时性能探究</title>
      <link>https://www.vxworks7.com/post/vxworks/vxworks-real-time-feature-explore.html</link>
      <pubDate>Thu, 02 Jun 2022 11:52:03 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/vxworks-real-time-feature-explore.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;VxWorks&lt;/code&gt;操作系统是一款硬实时操作系统，一直听闻其实时性能非常优秀，但是一直没有一个直观地概念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔者最近在使用
&lt;a href=&#34;https://www.vxworks.net/&#34; title=&#34;VxWorks&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    VxWorks
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;, 由大名鼎鼎的风河（WindRiver）开发。本篇文章就是将VxWorks操作系统和市面上几种其他实时操作系统的实时性能进行对比。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>风河公司的资本交易历史</title>
      <link>https://www.vxworks7.com/post/vxworks/windriver-capital-transaction.html</link>
      <pubDate>Thu, 20 Jan 2022 05:40:25 -0400</pubDate>
      
      <guid>https://www.vxworks7.com/post/vxworks/windriver-capital-transaction.html</guid>
      <description>&lt;p&gt;日前，安波福宣布同意以43亿美元现金从私募股权公司TPG Capital收购风河公司（
&lt;a href=&#34;https://www.windriver.club&#34; title=&#34;Wind River&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    Wind River
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;），以帮助其在多个行业的关键软件领域建立独特地位，继续其智能转型，向边缘支持、软件定义的未来迈进。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mermaid支持流程图</title>
      <link>https://www.vxworks7.com/post/mermaid-charts.html</link>
      <pubDate>Sat, 18 Sep 2021 20:58:13 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/mermaid-charts.html</guid>
      <description>&lt;p&gt;本主题已支持 &lt;code&gt;Mermaid&lt;/code&gt; 实现以纯文本的方式绘制流程图、序列图、甘特图、状态图、关系图行等等，随着 &lt;code&gt;Mermaid&lt;/code&gt; 也在逐步发展，后续还会有各种各样的图被引入进来，更多的类型及使用方式可关注其官方网站：
&lt;a href=&#34;https://mermaid-js.github.io/&#34; title=&#34;https://mermaid-js.github.io/&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    https://mermaid-js.github.io/
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数学公式渲染</title>
      <link>https://www.vxworks7.com/post/math-formula.html</link>
      <pubDate>Sat, 11 Sep 2021 10:16:02 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/math-formula.html</guid>
      <description>&lt;p&gt;本主题支持 &lt;code&gt;mathjax&lt;/code&gt; 和 &lt;code&gt;katex&lt;/code&gt; 两种不的方案支持数学公式的渲染，可根据自已的需求进行选择。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>支持用户自定义设计</title>
      <link>https://www.vxworks7.com/post/custom-files.html</link>
      <pubDate>Fri, 10 Sep 2021 21:02:32 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/custom-files.html</guid>
      <description>&lt;p&gt;对于熟悉前端开发的用户来说，可以通过自定义文件配置，实现对站点的样式和布局进行个性化的调整。其中布局方面主要是支持左侧边栏的站点概览部分，以及站点底部2个位置，但样式的重置可以是整个站点的任意位置。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自定义短语示例</title>
      <link>https://www.vxworks7.com/post/shortcodes.html</link>
      <pubDate>Fri, 06 Aug 2021 14:41:50 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/shortcodes.html</guid>
      <description>&lt;p&gt;虽然 &lt;code&gt;Markdown&lt;/code&gt; 语法已经非常丰富能够满足我们写文章的绝大部分需求，但是为更好的对文章内容进行更友好的排版，为引设计一套自定义的短语，便于在使用时能够快速引用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>文章目录导航</title>
      <link>https://www.vxworks7.com/post/table-of-content.html</link>
      <pubDate>Tue, 08 Jun 2021 21:12:52 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/table-of-content.html</guid>
      <description>&lt;p&gt;巴顿将军说过：“衡量一个人是否成功，不是看他站到顶峰，而是从顶峰跌落之后的反弹力”，褚时健的人生便是如此，中年发家致富，名利双收，之后又跌落到谷底，等到74岁再创业，10年后带着褚橙归来，东山再起收获亿万财富，他的发展轨迹就是反弹的过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo 内置的 Chroma 语法高亮</title>
      <link>https://www.vxworks7.com/post/syntax-highlighting.html</link>
      <pubDate>Mon, 07 Jun 2021 19:09:52 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/syntax-highlighting.html</guid>
      <description>&lt;p&gt;Hugo 通过 Chroma 提供非常快速的语法高亮显示，现 Hugo 中使用 Chroma 作为代码块高亮支持，它内置在 Go 语言当中，速度是真的非常、非常快，而且最为重要的是它也兼容之前我们使用的 Pygments 方式。&lt;/p&gt;
&lt;p&gt;以下通过 Hugo 内置短代码 &lt;code&gt;highlight&lt;/code&gt; 和 &lt;code&gt;Markdown&lt;/code&gt; 代码块方式分别验证不同语言的代码块渲染效果并能正确高亮显示，有关优化语法突出显示的更多信息，请参阅 
&lt;a href=&#34;https://gohugo.io/getting-started/configuration-markup#highlight&#34; title=&#34;Hugo 文档&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    Hugo 文档
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>支持 Emoji 表情</title>
      <link>https://www.vxworks7.com/post/emoji-support.html</link>
      <pubDate>Fri, 04 Jun 2021 19:46:45 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/emoji-support.html</guid>
      <description>&lt;p&gt;Emoji 可以通过多种方式在 Hugo 项目中启用。&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://gohugo.io/functions/emojify/&#34; title=&#34;&amp;lt;code&amp;gt;emojify&amp;lt;/code&amp;gt;&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    &lt;code&gt;emojify&lt;/code&gt;
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt; 方法可以直接在模板中调用, 或者使用
&lt;a href=&#34;https://gohugo.io/templates/shortcode-templates#inline-shortcodes&#34; title=&#34;行内 Shortcodes&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    行内 Shortcodes
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;要全局使用 emoji, 需要在你的
&lt;a href=&#34;https://gohugo.io/getting-started/configuration/&#34; title=&#34;网站配置&#34; rel=&#34;noopener external nofollow noreferrer&#34; target=&#34;_blank&#34; class=&#34; exturl&#34;&gt;
    网站配置
    &lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;
&lt;/a&gt;中设置 &lt;code&gt;enableEmoji&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt;，
然后你就可以直接在文章中输入 emoji 的代码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Markdown 语法支持</title>
      <link>https://www.vxworks7.com/post/markdown-syntax.html</link>
      <pubDate>Thu, 03 Jun 2021 11:52:18 +0800</pubDate>
      
      <guid>https://www.vxworks7.com/post/markdown-syntax.html</guid>
      <description>&lt;p&gt;仅以此篇文章来测试下在 &lt;code&gt;NexT&lt;/code&gt; 主题中在通过 &lt;code&gt;Hugo&lt;/code&gt; 引擎来建站时，是否支持 &lt;code&gt;Markdown&lt;/code&gt; 文件内容中所写的各种语法，并展示下实际的效果。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
